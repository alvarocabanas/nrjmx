name: Prerelease Linux pipeline

on:
  release:
    types:
      - prereleased
    tags:
      - '*'

env:
  GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
  GPG_MAIL: 'infrastructure-eng@newrelic.com'
  GPG_PASSPHRASE: ${{ secrets.OHAI_GPG_PASSPHRASE }}
  GPG_PRIVATE_KEY_BASE64: ${{ secrets.OHAI_GPG_PRIVATE_KEY_BASE64 }} # base64 encoded
  TAG:  ${{ github.event.release.tag_name }}
  DOCKER_HUB_ID: ${{ secrets.OHAI_DOCKER_HUB_ID }}
  DOCKER_HUB_PASSWORD: ${{ secrets.OHAI_DOCKER_HUB_PASSWORD }}
  SCHEMA_BRANCH: ${{ github.event.release.tag_name }}
  AWS_S3_BUCKET_NAME: "nr-downloads-ohai-staging"
  AWS_S3_LOCK_BUCKET_NAME: "onhost-ci-lock-staging"
  AWS_REGION: "us-east-1"

jobs:
#  unit-test-linux:
#    name: Linux unit tests
#    runs-on: ubuntu-20.04
#
#    steps:
#      - uses: actions/checkout@v2
#
#      - name: Install Go
#        uses: actions/setup-go@v2
#        with:
#          go-version: ${{env.GO_VERSION}}
#
#      - name: Running unit tests
#        run: make ci/test

#  packaging-linux:
#    name: Build and upload all artifacts into GH Release assets
#    runs-on: ubuntu-20.04
##    needs: [unit-test-linux]
#
#    steps:
#      - uses: actions/checkout@v2
#
#      - name: Login to DockerHub
#        uses: docker/login-action@v1
#        with:
#          username: ${{ env.DOCKER_HUB_ID }}
#          password: ${{ env.DOCKER_HUB_PASSWORD }}
#
#      - name: Releasing linux packages
#        run: make ci/release

  packaging-Windows:
    name: Windows MSI build
    runs-on: windows-latest
#    needs: [ packaging-linux ]

    steps:
      - uses: actions/checkout@v2
      - name: Login to DockerHub
        uses: docker/login-action@v1
        with:
          username: ${{ env.DOCKER_HUB_ID }}
          password: ${{ env.DOCKER_HUB_PASSWORD }}

    uses: dsaltares/fetch-gh-release-asset@master
    with:
      repo: "newrelic/nrjmx"
      version: "tags/v1.7.0"
      file: "nrjmx_linux_${{env.TAG:1}}_noarch.tar.gz"
      target: "nrjmx_linux_${{env.TAG:1}}_noarch.zip"
      token: ${{ secrets.GITHUB_TOKEN }}
      - name: Running unit tests
      run: ./win_build.ps1

#      - name: Upload MSI to GH
#        shell: bash
#        run: build/upload_artifacts_gh.sh

#  publishing-to-s3:
#    name: Publish linux artifacts into s3 staging bucket
#    runs-on: ubuntu-20.04
#    needs: [packaging-linux]
#
#    strategy:
#      max-parallel: 1
#      matrix:
#        assetsType:
#          - "targz"
#          - "deb"
#          - "rpm"

#    steps:
#      - name: Login to DockerHub
#        uses: docker/login-action@v1
#        with:
#          username: ${{ env.DOCKER_HUB_ID }}
#          password: ${{ env.DOCKER_HUB_PASSWORD }}
#      - name: Publish ${{ matrix.assetsType }} to S3 action
#        uses: newrelic/infrastructure-publish-action@v1.0.14
#        env:
#          AWS_ACCESS_KEY_ID: ${{ secrets.OHAI_AWS_ACCESS_KEY_ID_STAGING }}
#          AWS_SECRET_ACCESS_KEY: ${{ secrets.OHAI_AWS_SECRET_ACCESS_KEY_STAGING }}
#          AWS_ROLE_ARN: ${{ secrets.OHAI_AWS_ROLE_ARN_STAGING }}
#          AWS_ROLE_SESSION_NAME: ${{ secrets.OHAI_AWS_ROLE_SESSION_NAME_STAGING }}
#        with:
#          tag: ${{env.TAG}}
#          app_name: "newrelic-infra"
#          repo_name: "newrelic/infrastructure-agent"
#          schema: "custom"
#          schema_url: "https://raw.githubusercontent.com/newrelic/infrastructure-agent/${{ env.SCHEMA_BRANCH }}/build/upload-schema-linux-${{ matrix.assetsType }}.yml"
#          aws_access_key_id: ${{ env.AWS_ACCESS_KEY_ID }}
#          aws_secret_access_key: ${{ env.AWS_SECRET_ACCESS_KEY }}
#          aws_s3_bucket_name: ${{ env.AWS_S3_BUCKET_NAME }}
#          aws_s3_lock_bucket_name: ${{ env.AWS_S3_LOCK_BUCKET_NAME }}
#          access_point_host: "staging"
#          run_id: ${{ github.run_id }}
#          aws_region: ${{ env.AWS_REGION }}
#          aws_role_session_name: ${{ env.AWS_ROLE_SESSION_NAME }}
#          aws_role_arn: ${{ env.AWS_ROLE_ARN }}
#          # used for signing package stuff
#          gpg_passphrase: ${{ env.GPG_PASSPHRASE }}
#          gpg_private_key_base64: ${{ env.GPG_PRIVATE_KEY_BASE64 }}
