// Autogenerated by Thrift Compiler (0.13.0)
// DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING

package nrprotocol

import(
	"bytes"
	"context"
	"reflect"
	"database/sql/driver"
	"errors"
	"fmt"
	"github.com/apache/thrift/lib/go/thrift"
)

// (needed to ensure safety because of naive import list construction.)
var _ = thrift.ZERO
var _ = fmt.Printf
var _ = context.Background
var _ = reflect.DeepEqual
var _ = bytes.Equal

type ResponseType int64
const (
  ResponseType_STRING ResponseType = 1
  ResponseType_DOUBLE ResponseType = 2
  ResponseType_INT ResponseType = 3
  ResponseType_BOOL ResponseType = 4
  ResponseType_ERROR ResponseType = 5
)

func (p ResponseType) String() string {
  switch p {
  case ResponseType_STRING: return "STRING"
  case ResponseType_DOUBLE: return "DOUBLE"
  case ResponseType_INT: return "INT"
  case ResponseType_BOOL: return "BOOL"
  case ResponseType_ERROR: return "ERROR"
  }
  return "<UNSET>"
}

func ResponseTypeFromString(s string) (ResponseType, error) {
  switch s {
  case "STRING": return ResponseType_STRING, nil 
  case "DOUBLE": return ResponseType_DOUBLE, nil 
  case "INT": return ResponseType_INT, nil 
  case "BOOL": return ResponseType_BOOL, nil 
  case "ERROR": return ResponseType_ERROR, nil 
  }
  return ResponseType(0), fmt.Errorf("not a valid ResponseType string")
}


func ResponseTypePtr(v ResponseType) *ResponseType { return &v }

func (p ResponseType) MarshalText() ([]byte, error) {
return []byte(p.String()), nil
}

func (p *ResponseType) UnmarshalText(text []byte) error {
q, err := ResponseTypeFromString(string(text))
if (err != nil) {
return err
}
*p = q
return nil
}

func (p *ResponseType) Scan(value interface{}) error {
v, ok := value.(int64)
if !ok {
return errors.New("Scan value is not int64")
}
*p = ResponseType(v)
return nil
}

func (p * ResponseType) Value() (driver.Value, error) {
  if p == nil {
    return nil, nil
  }
return int64(*p), nil
}
// Attributes:
//  - ConnectionURL
//  - Hostname
//  - Port
//  - UriPath
//  - Username
//  - Password
//  - KeyStore
//  - KeyStorePassword
//  - TrustStore
//  - TrustStorePassword
//  - IsRemote
//  - IsJBossStandaloneMode
//  - UseSSL
//  - RequestTimeoutMs
//  - Verbose
type JMXConfig struct {
  ConnectionURL string `thrift:"connectionURL,1" db:"connectionURL" json:"connectionURL"`
  Hostname string `thrift:"hostname,2" db:"hostname" json:"hostname"`
  Port int32 `thrift:"port,3" db:"port" json:"port"`
  UriPath *string `thrift:"uriPath,4" db:"uriPath" json:"uriPath,omitempty"`
  Username string `thrift:"username,5" db:"username" json:"username"`
  Password string `thrift:"password,6" db:"password" json:"password"`
  KeyStore string `thrift:"keyStore,7" db:"keyStore" json:"keyStore"`
  KeyStorePassword string `thrift:"keyStorePassword,8" db:"keyStorePassword" json:"keyStorePassword"`
  TrustStore string `thrift:"trustStore,9" db:"trustStore" json:"trustStore"`
  TrustStorePassword string `thrift:"trustStorePassword,10" db:"trustStorePassword" json:"trustStorePassword"`
  IsRemote bool `thrift:"isRemote,11" db:"isRemote" json:"isRemote"`
  IsJBossStandaloneMode bool `thrift:"isJBossStandaloneMode,12" db:"isJBossStandaloneMode" json:"isJBossStandaloneMode"`
  UseSSL bool `thrift:"useSSL,13" db:"useSSL" json:"useSSL"`
  RequestTimeoutMs int64 `thrift:"requestTimeoutMs,14" db:"requestTimeoutMs" json:"requestTimeoutMs"`
  Verbose bool `thrift:"verbose,15" db:"verbose" json:"verbose"`
}

func NewJMXConfig() *JMXConfig {
  return &JMXConfig{}
}


func (p *JMXConfig) GetConnectionURL() string {
  return p.ConnectionURL
}

func (p *JMXConfig) GetHostname() string {
  return p.Hostname
}

func (p *JMXConfig) GetPort() int32 {
  return p.Port
}
var JMXConfig_UriPath_DEFAULT string
func (p *JMXConfig) GetUriPath() string {
  if !p.IsSetUriPath() {
    return JMXConfig_UriPath_DEFAULT
  }
return *p.UriPath
}

func (p *JMXConfig) GetUsername() string {
  return p.Username
}

func (p *JMXConfig) GetPassword() string {
  return p.Password
}

func (p *JMXConfig) GetKeyStore() string {
  return p.KeyStore
}

func (p *JMXConfig) GetKeyStorePassword() string {
  return p.KeyStorePassword
}

func (p *JMXConfig) GetTrustStore() string {
  return p.TrustStore
}

func (p *JMXConfig) GetTrustStorePassword() string {
  return p.TrustStorePassword
}

func (p *JMXConfig) GetIsRemote() bool {
  return p.IsRemote
}

func (p *JMXConfig) GetIsJBossStandaloneMode() bool {
  return p.IsJBossStandaloneMode
}

func (p *JMXConfig) GetUseSSL() bool {
  return p.UseSSL
}

func (p *JMXConfig) GetRequestTimeoutMs() int64 {
  return p.RequestTimeoutMs
}

func (p *JMXConfig) GetVerbose() bool {
  return p.Verbose
}
func (p *JMXConfig) IsSetUriPath() bool {
  return p.UriPath != nil
}

func (p *JMXConfig) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField2(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 3:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField3(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 4:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField4(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 5:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField5(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 6:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField6(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 7:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField7(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 8:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField8(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 9:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField9(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 10:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField10(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 11:
      if fieldTypeId == thrift.BOOL {
        if err := p.ReadField11(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 12:
      if fieldTypeId == thrift.BOOL {
        if err := p.ReadField12(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 13:
      if fieldTypeId == thrift.BOOL {
        if err := p.ReadField13(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 14:
      if fieldTypeId == thrift.I64 {
        if err := p.ReadField14(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 15:
      if fieldTypeId == thrift.BOOL {
        if err := p.ReadField15(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *JMXConfig)  ReadField1(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.ConnectionURL = v
}
  return nil
}

func (p *JMXConfig)  ReadField2(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.Hostname = v
}
  return nil
}

func (p *JMXConfig)  ReadField3(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(); err != nil {
  return thrift.PrependError("error reading field 3: ", err)
} else {
  p.Port = v
}
  return nil
}

func (p *JMXConfig)  ReadField4(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 4: ", err)
} else {
  p.UriPath = &v
}
  return nil
}

func (p *JMXConfig)  ReadField5(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 5: ", err)
} else {
  p.Username = v
}
  return nil
}

func (p *JMXConfig)  ReadField6(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 6: ", err)
} else {
  p.Password = v
}
  return nil
}

func (p *JMXConfig)  ReadField7(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 7: ", err)
} else {
  p.KeyStore = v
}
  return nil
}

func (p *JMXConfig)  ReadField8(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 8: ", err)
} else {
  p.KeyStorePassword = v
}
  return nil
}

func (p *JMXConfig)  ReadField9(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 9: ", err)
} else {
  p.TrustStore = v
}
  return nil
}

func (p *JMXConfig)  ReadField10(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 10: ", err)
} else {
  p.TrustStorePassword = v
}
  return nil
}

func (p *JMXConfig)  ReadField11(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadBool(); err != nil {
  return thrift.PrependError("error reading field 11: ", err)
} else {
  p.IsRemote = v
}
  return nil
}

func (p *JMXConfig)  ReadField12(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadBool(); err != nil {
  return thrift.PrependError("error reading field 12: ", err)
} else {
  p.IsJBossStandaloneMode = v
}
  return nil
}

func (p *JMXConfig)  ReadField13(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadBool(); err != nil {
  return thrift.PrependError("error reading field 13: ", err)
} else {
  p.UseSSL = v
}
  return nil
}

func (p *JMXConfig)  ReadField14(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(); err != nil {
  return thrift.PrependError("error reading field 14: ", err)
} else {
  p.RequestTimeoutMs = v
}
  return nil
}

func (p *JMXConfig)  ReadField15(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadBool(); err != nil {
  return thrift.PrependError("error reading field 15: ", err)
} else {
  p.Verbose = v
}
  return nil
}

func (p *JMXConfig) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("JMXConfig"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
    if err := p.writeField3(oprot); err != nil { return err }
    if err := p.writeField4(oprot); err != nil { return err }
    if err := p.writeField5(oprot); err != nil { return err }
    if err := p.writeField6(oprot); err != nil { return err }
    if err := p.writeField7(oprot); err != nil { return err }
    if err := p.writeField8(oprot); err != nil { return err }
    if err := p.writeField9(oprot); err != nil { return err }
    if err := p.writeField10(oprot); err != nil { return err }
    if err := p.writeField11(oprot); err != nil { return err }
    if err := p.writeField12(oprot); err != nil { return err }
    if err := p.writeField13(oprot); err != nil { return err }
    if err := p.writeField14(oprot); err != nil { return err }
    if err := p.writeField15(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *JMXConfig) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("connectionURL", thrift.STRING, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:connectionURL: ", p), err) }
  if err := oprot.WriteString(string(p.ConnectionURL)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.connectionURL (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:connectionURL: ", p), err) }
  return err
}

func (p *JMXConfig) writeField2(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("hostname", thrift.STRING, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:hostname: ", p), err) }
  if err := oprot.WriteString(string(p.Hostname)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.hostname (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:hostname: ", p), err) }
  return err
}

func (p *JMXConfig) writeField3(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("port", thrift.I32, 3); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:port: ", p), err) }
  if err := oprot.WriteI32(int32(p.Port)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.port (3) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 3:port: ", p), err) }
  return err
}

func (p *JMXConfig) writeField4(oprot thrift.TProtocol) (err error) {
  if p.IsSetUriPath() {
    if err := oprot.WriteFieldBegin("uriPath", thrift.STRING, 4); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:uriPath: ", p), err) }
    if err := oprot.WriteString(string(*p.UriPath)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.uriPath (4) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 4:uriPath: ", p), err) }
  }
  return err
}

func (p *JMXConfig) writeField5(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("username", thrift.STRING, 5); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 5:username: ", p), err) }
  if err := oprot.WriteString(string(p.Username)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.username (5) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 5:username: ", p), err) }
  return err
}

func (p *JMXConfig) writeField6(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("password", thrift.STRING, 6); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 6:password: ", p), err) }
  if err := oprot.WriteString(string(p.Password)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.password (6) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 6:password: ", p), err) }
  return err
}

func (p *JMXConfig) writeField7(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("keyStore", thrift.STRING, 7); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 7:keyStore: ", p), err) }
  if err := oprot.WriteString(string(p.KeyStore)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.keyStore (7) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 7:keyStore: ", p), err) }
  return err
}

func (p *JMXConfig) writeField8(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("keyStorePassword", thrift.STRING, 8); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 8:keyStorePassword: ", p), err) }
  if err := oprot.WriteString(string(p.KeyStorePassword)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.keyStorePassword (8) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 8:keyStorePassword: ", p), err) }
  return err
}

func (p *JMXConfig) writeField9(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("trustStore", thrift.STRING, 9); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 9:trustStore: ", p), err) }
  if err := oprot.WriteString(string(p.TrustStore)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.trustStore (9) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 9:trustStore: ", p), err) }
  return err
}

func (p *JMXConfig) writeField10(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("trustStorePassword", thrift.STRING, 10); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 10:trustStorePassword: ", p), err) }
  if err := oprot.WriteString(string(p.TrustStorePassword)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.trustStorePassword (10) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 10:trustStorePassword: ", p), err) }
  return err
}

func (p *JMXConfig) writeField11(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("isRemote", thrift.BOOL, 11); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 11:isRemote: ", p), err) }
  if err := oprot.WriteBool(bool(p.IsRemote)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.isRemote (11) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 11:isRemote: ", p), err) }
  return err
}

func (p *JMXConfig) writeField12(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("isJBossStandaloneMode", thrift.BOOL, 12); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 12:isJBossStandaloneMode: ", p), err) }
  if err := oprot.WriteBool(bool(p.IsJBossStandaloneMode)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.isJBossStandaloneMode (12) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 12:isJBossStandaloneMode: ", p), err) }
  return err
}

func (p *JMXConfig) writeField13(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("useSSL", thrift.BOOL, 13); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 13:useSSL: ", p), err) }
  if err := oprot.WriteBool(bool(p.UseSSL)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.useSSL (13) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 13:useSSL: ", p), err) }
  return err
}

func (p *JMXConfig) writeField14(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("requestTimeoutMs", thrift.I64, 14); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 14:requestTimeoutMs: ", p), err) }
  if err := oprot.WriteI64(int64(p.RequestTimeoutMs)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.requestTimeoutMs (14) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 14:requestTimeoutMs: ", p), err) }
  return err
}

func (p *JMXConfig) writeField15(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("verbose", thrift.BOOL, 15); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 15:verbose: ", p), err) }
  if err := oprot.WriteBool(bool(p.Verbose)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.verbose (15) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 15:verbose: ", p), err) }
  return err
}

func (p *JMXConfig) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("JMXConfig(%+v)", *p)
}

// Attributes:
//  - StatusMsg
//  - Name
//  - ResponseType
//  - StringValue
//  - DoubleValue
//  - IntValue
//  - BoolValue
type AttributeResponse struct {
  StatusMsg string `thrift:"statusMsg,1" db:"statusMsg" json:"statusMsg"`
  Name string `thrift:"name,2" db:"name" json:"name"`
  ResponseType ResponseType `thrift:"responseType,3" db:"responseType" json:"responseType"`
  StringValue string `thrift:"stringValue,4" db:"stringValue" json:"stringValue"`
  DoubleValue float64 `thrift:"doubleValue,5" db:"doubleValue" json:"doubleValue"`
  IntValue int64 `thrift:"intValue,6" db:"intValue" json:"intValue"`
  BoolValue bool `thrift:"boolValue,7" db:"boolValue" json:"boolValue"`
}

func NewAttributeResponse() *AttributeResponse {
  return &AttributeResponse{}
}


func (p *AttributeResponse) GetStatusMsg() string {
  return p.StatusMsg
}

func (p *AttributeResponse) GetName() string {
  return p.Name
}

func (p *AttributeResponse) GetResponseType() ResponseType {
  return p.ResponseType
}

func (p *AttributeResponse) GetStringValue() string {
  return p.StringValue
}

func (p *AttributeResponse) GetDoubleValue() float64 {
  return p.DoubleValue
}

func (p *AttributeResponse) GetIntValue() int64 {
  return p.IntValue
}

func (p *AttributeResponse) GetBoolValue() bool {
  return p.BoolValue
}
func (p *AttributeResponse) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField2(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 3:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField3(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 4:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField4(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 5:
      if fieldTypeId == thrift.DOUBLE {
        if err := p.ReadField5(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 6:
      if fieldTypeId == thrift.I64 {
        if err := p.ReadField6(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 7:
      if fieldTypeId == thrift.BOOL {
        if err := p.ReadField7(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *AttributeResponse)  ReadField1(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.StatusMsg = v
}
  return nil
}

func (p *AttributeResponse)  ReadField2(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.Name = v
}
  return nil
}

func (p *AttributeResponse)  ReadField3(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(); err != nil {
  return thrift.PrependError("error reading field 3: ", err)
} else {
  temp := ResponseType(v)
  p.ResponseType = temp
}
  return nil
}

func (p *AttributeResponse)  ReadField4(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 4: ", err)
} else {
  p.StringValue = v
}
  return nil
}

func (p *AttributeResponse)  ReadField5(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadDouble(); err != nil {
  return thrift.PrependError("error reading field 5: ", err)
} else {
  p.DoubleValue = v
}
  return nil
}

func (p *AttributeResponse)  ReadField6(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(); err != nil {
  return thrift.PrependError("error reading field 6: ", err)
} else {
  p.IntValue = v
}
  return nil
}

func (p *AttributeResponse)  ReadField7(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadBool(); err != nil {
  return thrift.PrependError("error reading field 7: ", err)
} else {
  p.BoolValue = v
}
  return nil
}

func (p *AttributeResponse) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("AttributeResponse"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
    if err := p.writeField3(oprot); err != nil { return err }
    if err := p.writeField4(oprot); err != nil { return err }
    if err := p.writeField5(oprot); err != nil { return err }
    if err := p.writeField6(oprot); err != nil { return err }
    if err := p.writeField7(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *AttributeResponse) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("statusMsg", thrift.STRING, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:statusMsg: ", p), err) }
  if err := oprot.WriteString(string(p.StatusMsg)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.statusMsg (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:statusMsg: ", p), err) }
  return err
}

func (p *AttributeResponse) writeField2(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("name", thrift.STRING, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:name: ", p), err) }
  if err := oprot.WriteString(string(p.Name)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.name (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:name: ", p), err) }
  return err
}

func (p *AttributeResponse) writeField3(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("responseType", thrift.I32, 3); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:responseType: ", p), err) }
  if err := oprot.WriteI32(int32(p.ResponseType)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.responseType (3) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 3:responseType: ", p), err) }
  return err
}

func (p *AttributeResponse) writeField4(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("stringValue", thrift.STRING, 4); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:stringValue: ", p), err) }
  if err := oprot.WriteString(string(p.StringValue)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.stringValue (4) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 4:stringValue: ", p), err) }
  return err
}

func (p *AttributeResponse) writeField5(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("doubleValue", thrift.DOUBLE, 5); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 5:doubleValue: ", p), err) }
  if err := oprot.WriteDouble(float64(p.DoubleValue)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.doubleValue (5) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 5:doubleValue: ", p), err) }
  return err
}

func (p *AttributeResponse) writeField6(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("intValue", thrift.I64, 6); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 6:intValue: ", p), err) }
  if err := oprot.WriteI64(int64(p.IntValue)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.intValue (6) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 6:intValue: ", p), err) }
  return err
}

func (p *AttributeResponse) writeField7(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("boolValue", thrift.BOOL, 7); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 7:boolValue: ", p), err) }
  if err := oprot.WriteBool(bool(p.BoolValue)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.boolValue (7) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 7:boolValue: ", p), err) }
  return err
}

func (p *AttributeResponse) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("AttributeResponse(%+v)", *p)
}

// Attributes:
//  - Message
//  - CauseMessage
//  - Stacktrace
type JMXError struct {
  Message string `thrift:"message,1" db:"message" json:"message"`
  CauseMessage string `thrift:"causeMessage,2" db:"causeMessage" json:"causeMessage"`
  Stacktrace string `thrift:"stacktrace,3" db:"stacktrace" json:"stacktrace"`
}

func NewJMXError() *JMXError {
  return &JMXError{}
}


func (p *JMXError) GetMessage() string {
  return p.Message
}

func (p *JMXError) GetCauseMessage() string {
  return p.CauseMessage
}

func (p *JMXError) GetStacktrace() string {
  return p.Stacktrace
}
func (p *JMXError) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField2(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 3:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField3(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *JMXError)  ReadField1(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.Message = v
}
  return nil
}

func (p *JMXError)  ReadField2(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.CauseMessage = v
}
  return nil
}

func (p *JMXError)  ReadField3(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 3: ", err)
} else {
  p.Stacktrace = v
}
  return nil
}

func (p *JMXError) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("JMXError"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
    if err := p.writeField3(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *JMXError) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("message", thrift.STRING, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:message: ", p), err) }
  if err := oprot.WriteString(string(p.Message)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.message (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:message: ", p), err) }
  return err
}

func (p *JMXError) writeField2(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("causeMessage", thrift.STRING, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:causeMessage: ", p), err) }
  if err := oprot.WriteString(string(p.CauseMessage)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.causeMessage (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:causeMessage: ", p), err) }
  return err
}

func (p *JMXError) writeField3(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("stacktrace", thrift.STRING, 3); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:stacktrace: ", p), err) }
  if err := oprot.WriteString(string(p.Stacktrace)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.stacktrace (3) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 3:stacktrace: ", p), err) }
  return err
}

func (p *JMXError) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("JMXError(%+v)", *p)
}

func (p *JMXError) Error() string {
  return p.String()
}

// Attributes:
//  - Message
type JMXConnectionError struct {
  Message string `thrift:"message,1" db:"message" json:"message"`
}

func NewJMXConnectionError() *JMXConnectionError {
  return &JMXConnectionError{}
}


func (p *JMXConnectionError) GetMessage() string {
  return p.Message
}
func (p *JMXConnectionError) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *JMXConnectionError)  ReadField1(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.Message = v
}
  return nil
}

func (p *JMXConnectionError) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("JMXConnectionError"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *JMXConnectionError) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("message", thrift.STRING, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:message: ", p), err) }
  if err := oprot.WriteString(string(p.Message)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.message (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:message: ", p), err) }
  return err
}

func (p *JMXConnectionError) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("JMXConnectionError(%+v)", *p)
}

func (p *JMXConnectionError) Error() string {
  return p.String()
}

type JMXService interface {
  // Parameters:
  //  - Config
  Connect(ctx context.Context, config *JMXConfig) (err error)
  Disconnect(ctx context.Context) (err error)
  GetClientVersion(ctx context.Context) (r string, err error)
  // Parameters:
  //  - MBeanNamePattern
  QueryMBeanNames(ctx context.Context, mBeanNamePattern string) (r []string, err error)
  // Parameters:
  //  - MBeanName
  GetMBeanAttributeNames(ctx context.Context, mBeanName string) (r []string, err error)
  // Parameters:
  //  - MBeanName
  //  - Attributes
  GetMBeanAttributes(ctx context.Context, mBeanName string, attributes []string) (r []*AttributeResponse, err error)
  // Parameters:
  //  - MBeanNamePattern
  QueryMBeanAttributes(ctx context.Context, mBeanNamePattern string) (r []*AttributeResponse, err error)
}

type JMXServiceClient struct {
  c thrift.TClient
}

func NewJMXServiceClientFactory(t thrift.TTransport, f thrift.TProtocolFactory) *JMXServiceClient {
  return &JMXServiceClient{
    c: thrift.NewTStandardClient(f.GetProtocol(t), f.GetProtocol(t)),
  }
}

func NewJMXServiceClientProtocol(t thrift.TTransport, iprot thrift.TProtocol, oprot thrift.TProtocol) *JMXServiceClient {
  return &JMXServiceClient{
    c: thrift.NewTStandardClient(iprot, oprot),
  }
}

func NewJMXServiceClient(c thrift.TClient) *JMXServiceClient {
  return &JMXServiceClient{
    c: c,
  }
}

func (p *JMXServiceClient) Client_() thrift.TClient {
  return p.c
}
// Parameters:
//  - Config
func (p *JMXServiceClient) Connect(ctx context.Context, config *JMXConfig) (err error) {
  var _args0 JMXServiceConnectArgs
  _args0.Config = config
  var _result1 JMXServiceConnectResult
  if err = p.Client_().Call(ctx, "connect", &_args0, &_result1); err != nil {
    return
  }
  switch {
  case _result1.ConnErr!= nil:
    return _result1.ConnErr
  case _result1.JmxErr!= nil:
    return _result1.JmxErr
  }

  return nil
}

func (p *JMXServiceClient) Disconnect(ctx context.Context) (err error) {
  var _args2 JMXServiceDisconnectArgs
  var _result3 JMXServiceDisconnectResult
  if err = p.Client_().Call(ctx, "disconnect", &_args2, &_result3); err != nil {
    return
  }
  switch {
  case _result3.Err!= nil:
    return _result3.Err
  }

  return nil
}

func (p *JMXServiceClient) GetClientVersion(ctx context.Context) (r string, err error) {
  var _args4 JMXServiceGetClientVersionArgs
  var _result5 JMXServiceGetClientVersionResult
  if err = p.Client_().Call(ctx, "getClientVersion", &_args4, &_result5); err != nil {
    return
  }
  switch {
  case _result5.Err!= nil:
    return r, _result5.Err
  }

  return _result5.GetSuccess(), nil
}

// Parameters:
//  - MBeanNamePattern
func (p *JMXServiceClient) QueryMBeanNames(ctx context.Context, mBeanNamePattern string) (r []string, err error) {
  var _args6 JMXServiceQueryMBeanNamesArgs
  _args6.MBeanNamePattern = mBeanNamePattern
  var _result7 JMXServiceQueryMBeanNamesResult
  if err = p.Client_().Call(ctx, "queryMBeanNames", &_args6, &_result7); err != nil {
    return
  }
  switch {
  case _result7.ConnErr!= nil:
    return r, _result7.ConnErr
  case _result7.JmxErr!= nil:
    return r, _result7.JmxErr
  }

  return _result7.GetSuccess(), nil
}

// Parameters:
//  - MBeanName
func (p *JMXServiceClient) GetMBeanAttributeNames(ctx context.Context, mBeanName string) (r []string, err error) {
  var _args8 JMXServiceGetMBeanAttributeNamesArgs
  _args8.MBeanName = mBeanName
  var _result9 JMXServiceGetMBeanAttributeNamesResult
  if err = p.Client_().Call(ctx, "getMBeanAttributeNames", &_args8, &_result9); err != nil {
    return
  }
  switch {
  case _result9.ConnErr!= nil:
    return r, _result9.ConnErr
  case _result9.JmxErr!= nil:
    return r, _result9.JmxErr
  }

  return _result9.GetSuccess(), nil
}

// Parameters:
//  - MBeanName
//  - Attributes
func (p *JMXServiceClient) GetMBeanAttributes(ctx context.Context, mBeanName string, attributes []string) (r []*AttributeResponse, err error) {
  var _args10 JMXServiceGetMBeanAttributesArgs
  _args10.MBeanName = mBeanName
  _args10.Attributes = attributes
  var _result11 JMXServiceGetMBeanAttributesResult
  if err = p.Client_().Call(ctx, "getMBeanAttributes", &_args10, &_result11); err != nil {
    return
  }
  switch {
  case _result11.ConnErr!= nil:
    return r, _result11.ConnErr
  case _result11.JmxErr!= nil:
    return r, _result11.JmxErr
  }

  return _result11.GetSuccess(), nil
}

// Parameters:
//  - MBeanNamePattern
func (p *JMXServiceClient) QueryMBeanAttributes(ctx context.Context, mBeanNamePattern string) (r []*AttributeResponse, err error) {
  var _args12 JMXServiceQueryMBeanAttributesArgs
  _args12.MBeanNamePattern = mBeanNamePattern
  var _result13 JMXServiceQueryMBeanAttributesResult
  if err = p.Client_().Call(ctx, "queryMBeanAttributes", &_args12, &_result13); err != nil {
    return
  }
  switch {
  case _result13.ConnErr!= nil:
    return r, _result13.ConnErr
  case _result13.JmxErr!= nil:
    return r, _result13.JmxErr
  }

  return _result13.GetSuccess(), nil
}

type JMXServiceProcessor struct {
  processorMap map[string]thrift.TProcessorFunction
  handler JMXService
}

func (p *JMXServiceProcessor) AddToProcessorMap(key string, processor thrift.TProcessorFunction) {
  p.processorMap[key] = processor
}

func (p *JMXServiceProcessor) GetProcessorFunction(key string) (processor thrift.TProcessorFunction, ok bool) {
  processor, ok = p.processorMap[key]
  return processor, ok
}

func (p *JMXServiceProcessor) ProcessorMap() map[string]thrift.TProcessorFunction {
  return p.processorMap
}

func NewJMXServiceProcessor(handler JMXService) *JMXServiceProcessor {

  self14 := &JMXServiceProcessor{handler:handler, processorMap:make(map[string]thrift.TProcessorFunction)}
  self14.processorMap["connect"] = &jMXServiceProcessorConnect{handler:handler}
  self14.processorMap["disconnect"] = &jMXServiceProcessorDisconnect{handler:handler}
  self14.processorMap["getClientVersion"] = &jMXServiceProcessorGetClientVersion{handler:handler}
  self14.processorMap["queryMBeanNames"] = &jMXServiceProcessorQueryMBeanNames{handler:handler}
  self14.processorMap["getMBeanAttributeNames"] = &jMXServiceProcessorGetMBeanAttributeNames{handler:handler}
  self14.processorMap["getMBeanAttributes"] = &jMXServiceProcessorGetMBeanAttributes{handler:handler}
  self14.processorMap["queryMBeanAttributes"] = &jMXServiceProcessorQueryMBeanAttributes{handler:handler}
return self14
}

func (p *JMXServiceProcessor) Process(ctx context.Context, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  name, _, seqId, err := iprot.ReadMessageBegin()
  if err != nil { return false, err }
  if processor, ok := p.GetProcessorFunction(name); ok {
    return processor.Process(ctx, seqId, iprot, oprot)
  }
  iprot.Skip(thrift.STRUCT)
  iprot.ReadMessageEnd()
  x15 := thrift.NewTApplicationException(thrift.UNKNOWN_METHOD, "Unknown function " + name)
  oprot.WriteMessageBegin(name, thrift.EXCEPTION, seqId)
  x15.Write(oprot)
  oprot.WriteMessageEnd()
  oprot.Flush(ctx)
  return false, x15

}

type jMXServiceProcessorConnect struct {
  handler JMXService
}

func (p *jMXServiceProcessorConnect) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := JMXServiceConnectArgs{}
  if err = args.Read(iprot); err != nil {
    iprot.ReadMessageEnd()
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
    oprot.WriteMessageBegin("connect", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush(ctx)
    return false, err
  }

  iprot.ReadMessageEnd()
  result := JMXServiceConnectResult{}
  var err2 error
  if err2 = p.handler.Connect(ctx, args.Config); err2 != nil {
  switch v := err2.(type) {
    case *JMXConnectionError:
  result.ConnErr = v
    case *JMXError:
  result.JmxErr = v
    default:
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing connect: " + err2.Error())
    oprot.WriteMessageBegin("connect", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush(ctx)
    return true, err2
  }
  }
  if err2 = oprot.WriteMessageBegin("connect", thrift.REPLY, seqId); err2 != nil {
    err = err2
  }
  if err2 = result.Write(oprot); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
    err = err2
  }
  if err != nil {
    return
  }
  return true, err
}

type jMXServiceProcessorDisconnect struct {
  handler JMXService
}

func (p *jMXServiceProcessorDisconnect) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := JMXServiceDisconnectArgs{}
  if err = args.Read(iprot); err != nil {
    iprot.ReadMessageEnd()
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
    oprot.WriteMessageBegin("disconnect", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush(ctx)
    return false, err
  }

  iprot.ReadMessageEnd()
  result := JMXServiceDisconnectResult{}
  var err2 error
  if err2 = p.handler.Disconnect(ctx); err2 != nil {
  switch v := err2.(type) {
    case *JMXError:
  result.Err = v
    default:
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing disconnect: " + err2.Error())
    oprot.WriteMessageBegin("disconnect", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush(ctx)
    return true, err2
  }
  }
  if err2 = oprot.WriteMessageBegin("disconnect", thrift.REPLY, seqId); err2 != nil {
    err = err2
  }
  if err2 = result.Write(oprot); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
    err = err2
  }
  if err != nil {
    return
  }
  return true, err
}

type jMXServiceProcessorGetClientVersion struct {
  handler JMXService
}

func (p *jMXServiceProcessorGetClientVersion) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := JMXServiceGetClientVersionArgs{}
  if err = args.Read(iprot); err != nil {
    iprot.ReadMessageEnd()
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
    oprot.WriteMessageBegin("getClientVersion", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush(ctx)
    return false, err
  }

  iprot.ReadMessageEnd()
  result := JMXServiceGetClientVersionResult{}
var retval string
  var err2 error
  if retval, err2 = p.handler.GetClientVersion(ctx); err2 != nil {
  switch v := err2.(type) {
    case *JMXError:
  result.Err = v
    default:
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing getClientVersion: " + err2.Error())
    oprot.WriteMessageBegin("getClientVersion", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush(ctx)
    return true, err2
  }
  } else {
    result.Success = &retval
}
  if err2 = oprot.WriteMessageBegin("getClientVersion", thrift.REPLY, seqId); err2 != nil {
    err = err2
  }
  if err2 = result.Write(oprot); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
    err = err2
  }
  if err != nil {
    return
  }
  return true, err
}

type jMXServiceProcessorQueryMBeanNames struct {
  handler JMXService
}

func (p *jMXServiceProcessorQueryMBeanNames) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := JMXServiceQueryMBeanNamesArgs{}
  if err = args.Read(iprot); err != nil {
    iprot.ReadMessageEnd()
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
    oprot.WriteMessageBegin("queryMBeanNames", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush(ctx)
    return false, err
  }

  iprot.ReadMessageEnd()
  result := JMXServiceQueryMBeanNamesResult{}
var retval []string
  var err2 error
  if retval, err2 = p.handler.QueryMBeanNames(ctx, args.MBeanNamePattern); err2 != nil {
  switch v := err2.(type) {
    case *JMXConnectionError:
  result.ConnErr = v
    case *JMXError:
  result.JmxErr = v
    default:
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing queryMBeanNames: " + err2.Error())
    oprot.WriteMessageBegin("queryMBeanNames", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush(ctx)
    return true, err2
  }
  } else {
    result.Success = retval
}
  if err2 = oprot.WriteMessageBegin("queryMBeanNames", thrift.REPLY, seqId); err2 != nil {
    err = err2
  }
  if err2 = result.Write(oprot); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
    err = err2
  }
  if err != nil {
    return
  }
  return true, err
}

type jMXServiceProcessorGetMBeanAttributeNames struct {
  handler JMXService
}

func (p *jMXServiceProcessorGetMBeanAttributeNames) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := JMXServiceGetMBeanAttributeNamesArgs{}
  if err = args.Read(iprot); err != nil {
    iprot.ReadMessageEnd()
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
    oprot.WriteMessageBegin("getMBeanAttributeNames", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush(ctx)
    return false, err
  }

  iprot.ReadMessageEnd()
  result := JMXServiceGetMBeanAttributeNamesResult{}
var retval []string
  var err2 error
  if retval, err2 = p.handler.GetMBeanAttributeNames(ctx, args.MBeanName); err2 != nil {
  switch v := err2.(type) {
    case *JMXConnectionError:
  result.ConnErr = v
    case *JMXError:
  result.JmxErr = v
    default:
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing getMBeanAttributeNames: " + err2.Error())
    oprot.WriteMessageBegin("getMBeanAttributeNames", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush(ctx)
    return true, err2
  }
  } else {
    result.Success = retval
}
  if err2 = oprot.WriteMessageBegin("getMBeanAttributeNames", thrift.REPLY, seqId); err2 != nil {
    err = err2
  }
  if err2 = result.Write(oprot); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
    err = err2
  }
  if err != nil {
    return
  }
  return true, err
}

type jMXServiceProcessorGetMBeanAttributes struct {
  handler JMXService
}

func (p *jMXServiceProcessorGetMBeanAttributes) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := JMXServiceGetMBeanAttributesArgs{}
  if err = args.Read(iprot); err != nil {
    iprot.ReadMessageEnd()
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
    oprot.WriteMessageBegin("getMBeanAttributes", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush(ctx)
    return false, err
  }

  iprot.ReadMessageEnd()
  result := JMXServiceGetMBeanAttributesResult{}
var retval []*AttributeResponse
  var err2 error
  if retval, err2 = p.handler.GetMBeanAttributes(ctx, args.MBeanName, args.Attributes); err2 != nil {
  switch v := err2.(type) {
    case *JMXConnectionError:
  result.ConnErr = v
    case *JMXError:
  result.JmxErr = v
    default:
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing getMBeanAttributes: " + err2.Error())
    oprot.WriteMessageBegin("getMBeanAttributes", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush(ctx)
    return true, err2
  }
  } else {
    result.Success = retval
}
  if err2 = oprot.WriteMessageBegin("getMBeanAttributes", thrift.REPLY, seqId); err2 != nil {
    err = err2
  }
  if err2 = result.Write(oprot); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
    err = err2
  }
  if err != nil {
    return
  }
  return true, err
}

type jMXServiceProcessorQueryMBeanAttributes struct {
  handler JMXService
}

func (p *jMXServiceProcessorQueryMBeanAttributes) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := JMXServiceQueryMBeanAttributesArgs{}
  if err = args.Read(iprot); err != nil {
    iprot.ReadMessageEnd()
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
    oprot.WriteMessageBegin("queryMBeanAttributes", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush(ctx)
    return false, err
  }

  iprot.ReadMessageEnd()
  result := JMXServiceQueryMBeanAttributesResult{}
var retval []*AttributeResponse
  var err2 error
  if retval, err2 = p.handler.QueryMBeanAttributes(ctx, args.MBeanNamePattern); err2 != nil {
  switch v := err2.(type) {
    case *JMXConnectionError:
  result.ConnErr = v
    case *JMXError:
  result.JmxErr = v
    default:
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing queryMBeanAttributes: " + err2.Error())
    oprot.WriteMessageBegin("queryMBeanAttributes", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush(ctx)
    return true, err2
  }
  } else {
    result.Success = retval
}
  if err2 = oprot.WriteMessageBegin("queryMBeanAttributes", thrift.REPLY, seqId); err2 != nil {
    err = err2
  }
  if err2 = result.Write(oprot); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
    err = err2
  }
  if err != nil {
    return
  }
  return true, err
}


// HELPER FUNCTIONS AND STRUCTURES

// Attributes:
//  - Config
type JMXServiceConnectArgs struct {
  Config *JMXConfig `thrift:"config,1" db:"config" json:"config"`
}

func NewJMXServiceConnectArgs() *JMXServiceConnectArgs {
  return &JMXServiceConnectArgs{}
}

var JMXServiceConnectArgs_Config_DEFAULT *JMXConfig
func (p *JMXServiceConnectArgs) GetConfig() *JMXConfig {
  if !p.IsSetConfig() {
    return JMXServiceConnectArgs_Config_DEFAULT
  }
return p.Config
}
func (p *JMXServiceConnectArgs) IsSetConfig() bool {
  return p.Config != nil
}

func (p *JMXServiceConnectArgs) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *JMXServiceConnectArgs)  ReadField1(iprot thrift.TProtocol) error {
  p.Config = &JMXConfig{}
  if err := p.Config.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Config), err)
  }
  return nil
}

func (p *JMXServiceConnectArgs) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("connect_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *JMXServiceConnectArgs) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("config", thrift.STRUCT, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:config: ", p), err) }
  if err := p.Config.Write(oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Config), err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:config: ", p), err) }
  return err
}

func (p *JMXServiceConnectArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("JMXServiceConnectArgs(%+v)", *p)
}

// Attributes:
//  - ConnErr
//  - JmxErr
type JMXServiceConnectResult struct {
  ConnErr *JMXConnectionError `thrift:"connErr,1" db:"connErr" json:"connErr,omitempty"`
  JmxErr *JMXError `thrift:"jmxErr,2" db:"jmxErr" json:"jmxErr,omitempty"`
}

func NewJMXServiceConnectResult() *JMXServiceConnectResult {
  return &JMXServiceConnectResult{}
}

var JMXServiceConnectResult_ConnErr_DEFAULT *JMXConnectionError
func (p *JMXServiceConnectResult) GetConnErr() *JMXConnectionError {
  if !p.IsSetConnErr() {
    return JMXServiceConnectResult_ConnErr_DEFAULT
  }
return p.ConnErr
}
var JMXServiceConnectResult_JmxErr_DEFAULT *JMXError
func (p *JMXServiceConnectResult) GetJmxErr() *JMXError {
  if !p.IsSetJmxErr() {
    return JMXServiceConnectResult_JmxErr_DEFAULT
  }
return p.JmxErr
}
func (p *JMXServiceConnectResult) IsSetConnErr() bool {
  return p.ConnErr != nil
}

func (p *JMXServiceConnectResult) IsSetJmxErr() bool {
  return p.JmxErr != nil
}

func (p *JMXServiceConnectResult) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField2(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *JMXServiceConnectResult)  ReadField1(iprot thrift.TProtocol) error {
  p.ConnErr = &JMXConnectionError{}
  if err := p.ConnErr.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.ConnErr), err)
  }
  return nil
}

func (p *JMXServiceConnectResult)  ReadField2(iprot thrift.TProtocol) error {
  p.JmxErr = &JMXError{}
  if err := p.JmxErr.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.JmxErr), err)
  }
  return nil
}

func (p *JMXServiceConnectResult) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("connect_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *JMXServiceConnectResult) writeField1(oprot thrift.TProtocol) (err error) {
  if p.IsSetConnErr() {
    if err := oprot.WriteFieldBegin("connErr", thrift.STRUCT, 1); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:connErr: ", p), err) }
    if err := p.ConnErr.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.ConnErr), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 1:connErr: ", p), err) }
  }
  return err
}

func (p *JMXServiceConnectResult) writeField2(oprot thrift.TProtocol) (err error) {
  if p.IsSetJmxErr() {
    if err := oprot.WriteFieldBegin("jmxErr", thrift.STRUCT, 2); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:jmxErr: ", p), err) }
    if err := p.JmxErr.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.JmxErr), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 2:jmxErr: ", p), err) }
  }
  return err
}

func (p *JMXServiceConnectResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("JMXServiceConnectResult(%+v)", *p)
}

type JMXServiceDisconnectArgs struct {
}

func NewJMXServiceDisconnectArgs() *JMXServiceDisconnectArgs {
  return &JMXServiceDisconnectArgs{}
}

func (p *JMXServiceDisconnectArgs) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    if err := iprot.Skip(fieldTypeId); err != nil {
      return err
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *JMXServiceDisconnectArgs) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("disconnect_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *JMXServiceDisconnectArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("JMXServiceDisconnectArgs(%+v)", *p)
}

// Attributes:
//  - Err
type JMXServiceDisconnectResult struct {
  Err *JMXError `thrift:"err,1" db:"err" json:"err,omitempty"`
}

func NewJMXServiceDisconnectResult() *JMXServiceDisconnectResult {
  return &JMXServiceDisconnectResult{}
}

var JMXServiceDisconnectResult_Err_DEFAULT *JMXError
func (p *JMXServiceDisconnectResult) GetErr() *JMXError {
  if !p.IsSetErr() {
    return JMXServiceDisconnectResult_Err_DEFAULT
  }
return p.Err
}
func (p *JMXServiceDisconnectResult) IsSetErr() bool {
  return p.Err != nil
}

func (p *JMXServiceDisconnectResult) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *JMXServiceDisconnectResult)  ReadField1(iprot thrift.TProtocol) error {
  p.Err = &JMXError{}
  if err := p.Err.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Err), err)
  }
  return nil
}

func (p *JMXServiceDisconnectResult) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("disconnect_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *JMXServiceDisconnectResult) writeField1(oprot thrift.TProtocol) (err error) {
  if p.IsSetErr() {
    if err := oprot.WriteFieldBegin("err", thrift.STRUCT, 1); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:err: ", p), err) }
    if err := p.Err.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Err), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 1:err: ", p), err) }
  }
  return err
}

func (p *JMXServiceDisconnectResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("JMXServiceDisconnectResult(%+v)", *p)
}

type JMXServiceGetClientVersionArgs struct {
}

func NewJMXServiceGetClientVersionArgs() *JMXServiceGetClientVersionArgs {
  return &JMXServiceGetClientVersionArgs{}
}

func (p *JMXServiceGetClientVersionArgs) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    if err := iprot.Skip(fieldTypeId); err != nil {
      return err
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *JMXServiceGetClientVersionArgs) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("getClientVersion_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *JMXServiceGetClientVersionArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("JMXServiceGetClientVersionArgs(%+v)", *p)
}

// Attributes:
//  - Success
//  - Err
type JMXServiceGetClientVersionResult struct {
  Success *string `thrift:"success,0" db:"success" json:"success,omitempty"`
  Err *JMXError `thrift:"err,1" db:"err" json:"err,omitempty"`
}

func NewJMXServiceGetClientVersionResult() *JMXServiceGetClientVersionResult {
  return &JMXServiceGetClientVersionResult{}
}

var JMXServiceGetClientVersionResult_Success_DEFAULT string
func (p *JMXServiceGetClientVersionResult) GetSuccess() string {
  if !p.IsSetSuccess() {
    return JMXServiceGetClientVersionResult_Success_DEFAULT
  }
return *p.Success
}
var JMXServiceGetClientVersionResult_Err_DEFAULT *JMXError
func (p *JMXServiceGetClientVersionResult) GetErr() *JMXError {
  if !p.IsSetErr() {
    return JMXServiceGetClientVersionResult_Err_DEFAULT
  }
return p.Err
}
func (p *JMXServiceGetClientVersionResult) IsSetSuccess() bool {
  return p.Success != nil
}

func (p *JMXServiceGetClientVersionResult) IsSetErr() bool {
  return p.Err != nil
}

func (p *JMXServiceGetClientVersionResult) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField0(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *JMXServiceGetClientVersionResult)  ReadField0(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 0: ", err)
} else {
  p.Success = &v
}
  return nil
}

func (p *JMXServiceGetClientVersionResult)  ReadField1(iprot thrift.TProtocol) error {
  p.Err = &JMXError{}
  if err := p.Err.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Err), err)
  }
  return nil
}

func (p *JMXServiceGetClientVersionResult) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("getClientVersion_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField0(oprot); err != nil { return err }
    if err := p.writeField1(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *JMXServiceGetClientVersionResult) writeField0(oprot thrift.TProtocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin("success", thrift.STRING, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := oprot.WriteString(string(*p.Success)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.success (0) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *JMXServiceGetClientVersionResult) writeField1(oprot thrift.TProtocol) (err error) {
  if p.IsSetErr() {
    if err := oprot.WriteFieldBegin("err", thrift.STRUCT, 1); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:err: ", p), err) }
    if err := p.Err.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Err), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 1:err: ", p), err) }
  }
  return err
}

func (p *JMXServiceGetClientVersionResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("JMXServiceGetClientVersionResult(%+v)", *p)
}

// Attributes:
//  - MBeanNamePattern
type JMXServiceQueryMBeanNamesArgs struct {
  MBeanNamePattern string `thrift:"mBeanNamePattern,1" db:"mBeanNamePattern" json:"mBeanNamePattern"`
}

func NewJMXServiceQueryMBeanNamesArgs() *JMXServiceQueryMBeanNamesArgs {
  return &JMXServiceQueryMBeanNamesArgs{}
}


func (p *JMXServiceQueryMBeanNamesArgs) GetMBeanNamePattern() string {
  return p.MBeanNamePattern
}
func (p *JMXServiceQueryMBeanNamesArgs) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *JMXServiceQueryMBeanNamesArgs)  ReadField1(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.MBeanNamePattern = v
}
  return nil
}

func (p *JMXServiceQueryMBeanNamesArgs) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("queryMBeanNames_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *JMXServiceQueryMBeanNamesArgs) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("mBeanNamePattern", thrift.STRING, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:mBeanNamePattern: ", p), err) }
  if err := oprot.WriteString(string(p.MBeanNamePattern)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.mBeanNamePattern (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:mBeanNamePattern: ", p), err) }
  return err
}

func (p *JMXServiceQueryMBeanNamesArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("JMXServiceQueryMBeanNamesArgs(%+v)", *p)
}

// Attributes:
//  - Success
//  - ConnErr
//  - JmxErr
type JMXServiceQueryMBeanNamesResult struct {
  Success []string `thrift:"success,0" db:"success" json:"success,omitempty"`
  ConnErr *JMXConnectionError `thrift:"connErr,1" db:"connErr" json:"connErr,omitempty"`
  JmxErr *JMXError `thrift:"jmxErr,2" db:"jmxErr" json:"jmxErr,omitempty"`
}

func NewJMXServiceQueryMBeanNamesResult() *JMXServiceQueryMBeanNamesResult {
  return &JMXServiceQueryMBeanNamesResult{}
}

var JMXServiceQueryMBeanNamesResult_Success_DEFAULT []string

func (p *JMXServiceQueryMBeanNamesResult) GetSuccess() []string {
  return p.Success
}
var JMXServiceQueryMBeanNamesResult_ConnErr_DEFAULT *JMXConnectionError
func (p *JMXServiceQueryMBeanNamesResult) GetConnErr() *JMXConnectionError {
  if !p.IsSetConnErr() {
    return JMXServiceQueryMBeanNamesResult_ConnErr_DEFAULT
  }
return p.ConnErr
}
var JMXServiceQueryMBeanNamesResult_JmxErr_DEFAULT *JMXError
func (p *JMXServiceQueryMBeanNamesResult) GetJmxErr() *JMXError {
  if !p.IsSetJmxErr() {
    return JMXServiceQueryMBeanNamesResult_JmxErr_DEFAULT
  }
return p.JmxErr
}
func (p *JMXServiceQueryMBeanNamesResult) IsSetSuccess() bool {
  return p.Success != nil
}

func (p *JMXServiceQueryMBeanNamesResult) IsSetConnErr() bool {
  return p.ConnErr != nil
}

func (p *JMXServiceQueryMBeanNamesResult) IsSetJmxErr() bool {
  return p.JmxErr != nil
}

func (p *JMXServiceQueryMBeanNamesResult) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if fieldTypeId == thrift.LIST {
        if err := p.ReadField0(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField2(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *JMXServiceQueryMBeanNamesResult)  ReadField0(iprot thrift.TProtocol) error {
  _, size, err := iprot.ReadListBegin()
  if err != nil {
    return thrift.PrependError("error reading list begin: ", err)
  }
  tSlice := make([]string, 0, size)
  p.Success =  tSlice
  for i := 0; i < size; i ++ {
var _elem16 string
    if v, err := iprot.ReadString(); err != nil {
    return thrift.PrependError("error reading field 0: ", err)
} else {
    _elem16 = v
}
    p.Success = append(p.Success, _elem16)
  }
  if err := iprot.ReadListEnd(); err != nil {
    return thrift.PrependError("error reading list end: ", err)
  }
  return nil
}

func (p *JMXServiceQueryMBeanNamesResult)  ReadField1(iprot thrift.TProtocol) error {
  p.ConnErr = &JMXConnectionError{}
  if err := p.ConnErr.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.ConnErr), err)
  }
  return nil
}

func (p *JMXServiceQueryMBeanNamesResult)  ReadField2(iprot thrift.TProtocol) error {
  p.JmxErr = &JMXError{}
  if err := p.JmxErr.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.JmxErr), err)
  }
  return nil
}

func (p *JMXServiceQueryMBeanNamesResult) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("queryMBeanNames_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField0(oprot); err != nil { return err }
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *JMXServiceQueryMBeanNamesResult) writeField0(oprot thrift.TProtocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin("success", thrift.LIST, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := oprot.WriteListBegin(thrift.STRING, len(p.Success)); err != nil {
      return thrift.PrependError("error writing list begin: ", err)
    }
    for _, v := range p.Success {
      if err := oprot.WriteString(string(v)); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err) }
    }
    if err := oprot.WriteListEnd(); err != nil {
      return thrift.PrependError("error writing list end: ", err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *JMXServiceQueryMBeanNamesResult) writeField1(oprot thrift.TProtocol) (err error) {
  if p.IsSetConnErr() {
    if err := oprot.WriteFieldBegin("connErr", thrift.STRUCT, 1); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:connErr: ", p), err) }
    if err := p.ConnErr.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.ConnErr), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 1:connErr: ", p), err) }
  }
  return err
}

func (p *JMXServiceQueryMBeanNamesResult) writeField2(oprot thrift.TProtocol) (err error) {
  if p.IsSetJmxErr() {
    if err := oprot.WriteFieldBegin("jmxErr", thrift.STRUCT, 2); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:jmxErr: ", p), err) }
    if err := p.JmxErr.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.JmxErr), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 2:jmxErr: ", p), err) }
  }
  return err
}

func (p *JMXServiceQueryMBeanNamesResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("JMXServiceQueryMBeanNamesResult(%+v)", *p)
}

// Attributes:
//  - MBeanName
type JMXServiceGetMBeanAttributeNamesArgs struct {
  MBeanName string `thrift:"mBeanName,1" db:"mBeanName" json:"mBeanName"`
}

func NewJMXServiceGetMBeanAttributeNamesArgs() *JMXServiceGetMBeanAttributeNamesArgs {
  return &JMXServiceGetMBeanAttributeNamesArgs{}
}


func (p *JMXServiceGetMBeanAttributeNamesArgs) GetMBeanName() string {
  return p.MBeanName
}
func (p *JMXServiceGetMBeanAttributeNamesArgs) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *JMXServiceGetMBeanAttributeNamesArgs)  ReadField1(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.MBeanName = v
}
  return nil
}

func (p *JMXServiceGetMBeanAttributeNamesArgs) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("getMBeanAttributeNames_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *JMXServiceGetMBeanAttributeNamesArgs) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("mBeanName", thrift.STRING, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:mBeanName: ", p), err) }
  if err := oprot.WriteString(string(p.MBeanName)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.mBeanName (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:mBeanName: ", p), err) }
  return err
}

func (p *JMXServiceGetMBeanAttributeNamesArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("JMXServiceGetMBeanAttributeNamesArgs(%+v)", *p)
}

// Attributes:
//  - Success
//  - ConnErr
//  - JmxErr
type JMXServiceGetMBeanAttributeNamesResult struct {
  Success []string `thrift:"success,0" db:"success" json:"success,omitempty"`
  ConnErr *JMXConnectionError `thrift:"connErr,1" db:"connErr" json:"connErr,omitempty"`
  JmxErr *JMXError `thrift:"jmxErr,2" db:"jmxErr" json:"jmxErr,omitempty"`
}

func NewJMXServiceGetMBeanAttributeNamesResult() *JMXServiceGetMBeanAttributeNamesResult {
  return &JMXServiceGetMBeanAttributeNamesResult{}
}

var JMXServiceGetMBeanAttributeNamesResult_Success_DEFAULT []string

func (p *JMXServiceGetMBeanAttributeNamesResult) GetSuccess() []string {
  return p.Success
}
var JMXServiceGetMBeanAttributeNamesResult_ConnErr_DEFAULT *JMXConnectionError
func (p *JMXServiceGetMBeanAttributeNamesResult) GetConnErr() *JMXConnectionError {
  if !p.IsSetConnErr() {
    return JMXServiceGetMBeanAttributeNamesResult_ConnErr_DEFAULT
  }
return p.ConnErr
}
var JMXServiceGetMBeanAttributeNamesResult_JmxErr_DEFAULT *JMXError
func (p *JMXServiceGetMBeanAttributeNamesResult) GetJmxErr() *JMXError {
  if !p.IsSetJmxErr() {
    return JMXServiceGetMBeanAttributeNamesResult_JmxErr_DEFAULT
  }
return p.JmxErr
}
func (p *JMXServiceGetMBeanAttributeNamesResult) IsSetSuccess() bool {
  return p.Success != nil
}

func (p *JMXServiceGetMBeanAttributeNamesResult) IsSetConnErr() bool {
  return p.ConnErr != nil
}

func (p *JMXServiceGetMBeanAttributeNamesResult) IsSetJmxErr() bool {
  return p.JmxErr != nil
}

func (p *JMXServiceGetMBeanAttributeNamesResult) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if fieldTypeId == thrift.LIST {
        if err := p.ReadField0(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField2(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *JMXServiceGetMBeanAttributeNamesResult)  ReadField0(iprot thrift.TProtocol) error {
  _, size, err := iprot.ReadListBegin()
  if err != nil {
    return thrift.PrependError("error reading list begin: ", err)
  }
  tSlice := make([]string, 0, size)
  p.Success =  tSlice
  for i := 0; i < size; i ++ {
var _elem17 string
    if v, err := iprot.ReadString(); err != nil {
    return thrift.PrependError("error reading field 0: ", err)
} else {
    _elem17 = v
}
    p.Success = append(p.Success, _elem17)
  }
  if err := iprot.ReadListEnd(); err != nil {
    return thrift.PrependError("error reading list end: ", err)
  }
  return nil
}

func (p *JMXServiceGetMBeanAttributeNamesResult)  ReadField1(iprot thrift.TProtocol) error {
  p.ConnErr = &JMXConnectionError{}
  if err := p.ConnErr.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.ConnErr), err)
  }
  return nil
}

func (p *JMXServiceGetMBeanAttributeNamesResult)  ReadField2(iprot thrift.TProtocol) error {
  p.JmxErr = &JMXError{}
  if err := p.JmxErr.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.JmxErr), err)
  }
  return nil
}

func (p *JMXServiceGetMBeanAttributeNamesResult) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("getMBeanAttributeNames_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField0(oprot); err != nil { return err }
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *JMXServiceGetMBeanAttributeNamesResult) writeField0(oprot thrift.TProtocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin("success", thrift.LIST, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := oprot.WriteListBegin(thrift.STRING, len(p.Success)); err != nil {
      return thrift.PrependError("error writing list begin: ", err)
    }
    for _, v := range p.Success {
      if err := oprot.WriteString(string(v)); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err) }
    }
    if err := oprot.WriteListEnd(); err != nil {
      return thrift.PrependError("error writing list end: ", err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *JMXServiceGetMBeanAttributeNamesResult) writeField1(oprot thrift.TProtocol) (err error) {
  if p.IsSetConnErr() {
    if err := oprot.WriteFieldBegin("connErr", thrift.STRUCT, 1); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:connErr: ", p), err) }
    if err := p.ConnErr.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.ConnErr), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 1:connErr: ", p), err) }
  }
  return err
}

func (p *JMXServiceGetMBeanAttributeNamesResult) writeField2(oprot thrift.TProtocol) (err error) {
  if p.IsSetJmxErr() {
    if err := oprot.WriteFieldBegin("jmxErr", thrift.STRUCT, 2); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:jmxErr: ", p), err) }
    if err := p.JmxErr.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.JmxErr), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 2:jmxErr: ", p), err) }
  }
  return err
}

func (p *JMXServiceGetMBeanAttributeNamesResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("JMXServiceGetMBeanAttributeNamesResult(%+v)", *p)
}

// Attributes:
//  - MBeanName
//  - Attributes
type JMXServiceGetMBeanAttributesArgs struct {
  MBeanName string `thrift:"mBeanName,1" db:"mBeanName" json:"mBeanName"`
  Attributes []string `thrift:"attributes,2" db:"attributes" json:"attributes"`
}

func NewJMXServiceGetMBeanAttributesArgs() *JMXServiceGetMBeanAttributesArgs {
  return &JMXServiceGetMBeanAttributesArgs{}
}


func (p *JMXServiceGetMBeanAttributesArgs) GetMBeanName() string {
  return p.MBeanName
}

func (p *JMXServiceGetMBeanAttributesArgs) GetAttributes() []string {
  return p.Attributes
}
func (p *JMXServiceGetMBeanAttributesArgs) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.LIST {
        if err := p.ReadField2(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *JMXServiceGetMBeanAttributesArgs)  ReadField1(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.MBeanName = v
}
  return nil
}

func (p *JMXServiceGetMBeanAttributesArgs)  ReadField2(iprot thrift.TProtocol) error {
  _, size, err := iprot.ReadListBegin()
  if err != nil {
    return thrift.PrependError("error reading list begin: ", err)
  }
  tSlice := make([]string, 0, size)
  p.Attributes =  tSlice
  for i := 0; i < size; i ++ {
var _elem18 string
    if v, err := iprot.ReadString(); err != nil {
    return thrift.PrependError("error reading field 0: ", err)
} else {
    _elem18 = v
}
    p.Attributes = append(p.Attributes, _elem18)
  }
  if err := iprot.ReadListEnd(); err != nil {
    return thrift.PrependError("error reading list end: ", err)
  }
  return nil
}

func (p *JMXServiceGetMBeanAttributesArgs) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("getMBeanAttributes_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *JMXServiceGetMBeanAttributesArgs) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("mBeanName", thrift.STRING, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:mBeanName: ", p), err) }
  if err := oprot.WriteString(string(p.MBeanName)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.mBeanName (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:mBeanName: ", p), err) }
  return err
}

func (p *JMXServiceGetMBeanAttributesArgs) writeField2(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("attributes", thrift.LIST, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:attributes: ", p), err) }
  if err := oprot.WriteListBegin(thrift.STRING, len(p.Attributes)); err != nil {
    return thrift.PrependError("error writing list begin: ", err)
  }
  for _, v := range p.Attributes {
    if err := oprot.WriteString(string(v)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err) }
  }
  if err := oprot.WriteListEnd(); err != nil {
    return thrift.PrependError("error writing list end: ", err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:attributes: ", p), err) }
  return err
}

func (p *JMXServiceGetMBeanAttributesArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("JMXServiceGetMBeanAttributesArgs(%+v)", *p)
}

// Attributes:
//  - Success
//  - ConnErr
//  - JmxErr
type JMXServiceGetMBeanAttributesResult struct {
  Success []*AttributeResponse `thrift:"success,0" db:"success" json:"success,omitempty"`
  ConnErr *JMXConnectionError `thrift:"connErr,1" db:"connErr" json:"connErr,omitempty"`
  JmxErr *JMXError `thrift:"jmxErr,2" db:"jmxErr" json:"jmxErr,omitempty"`
}

func NewJMXServiceGetMBeanAttributesResult() *JMXServiceGetMBeanAttributesResult {
  return &JMXServiceGetMBeanAttributesResult{}
}

var JMXServiceGetMBeanAttributesResult_Success_DEFAULT []*AttributeResponse

func (p *JMXServiceGetMBeanAttributesResult) GetSuccess() []*AttributeResponse {
  return p.Success
}
var JMXServiceGetMBeanAttributesResult_ConnErr_DEFAULT *JMXConnectionError
func (p *JMXServiceGetMBeanAttributesResult) GetConnErr() *JMXConnectionError {
  if !p.IsSetConnErr() {
    return JMXServiceGetMBeanAttributesResult_ConnErr_DEFAULT
  }
return p.ConnErr
}
var JMXServiceGetMBeanAttributesResult_JmxErr_DEFAULT *JMXError
func (p *JMXServiceGetMBeanAttributesResult) GetJmxErr() *JMXError {
  if !p.IsSetJmxErr() {
    return JMXServiceGetMBeanAttributesResult_JmxErr_DEFAULT
  }
return p.JmxErr
}
func (p *JMXServiceGetMBeanAttributesResult) IsSetSuccess() bool {
  return p.Success != nil
}

func (p *JMXServiceGetMBeanAttributesResult) IsSetConnErr() bool {
  return p.ConnErr != nil
}

func (p *JMXServiceGetMBeanAttributesResult) IsSetJmxErr() bool {
  return p.JmxErr != nil
}

func (p *JMXServiceGetMBeanAttributesResult) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if fieldTypeId == thrift.LIST {
        if err := p.ReadField0(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField2(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *JMXServiceGetMBeanAttributesResult)  ReadField0(iprot thrift.TProtocol) error {
  _, size, err := iprot.ReadListBegin()
  if err != nil {
    return thrift.PrependError("error reading list begin: ", err)
  }
  tSlice := make([]*AttributeResponse, 0, size)
  p.Success =  tSlice
  for i := 0; i < size; i ++ {
    _elem19 := &AttributeResponse{}
    if err := _elem19.Read(iprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", _elem19), err)
    }
    p.Success = append(p.Success, _elem19)
  }
  if err := iprot.ReadListEnd(); err != nil {
    return thrift.PrependError("error reading list end: ", err)
  }
  return nil
}

func (p *JMXServiceGetMBeanAttributesResult)  ReadField1(iprot thrift.TProtocol) error {
  p.ConnErr = &JMXConnectionError{}
  if err := p.ConnErr.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.ConnErr), err)
  }
  return nil
}

func (p *JMXServiceGetMBeanAttributesResult)  ReadField2(iprot thrift.TProtocol) error {
  p.JmxErr = &JMXError{}
  if err := p.JmxErr.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.JmxErr), err)
  }
  return nil
}

func (p *JMXServiceGetMBeanAttributesResult) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("getMBeanAttributes_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField0(oprot); err != nil { return err }
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *JMXServiceGetMBeanAttributesResult) writeField0(oprot thrift.TProtocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin("success", thrift.LIST, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := oprot.WriteListBegin(thrift.STRUCT, len(p.Success)); err != nil {
      return thrift.PrependError("error writing list begin: ", err)
    }
    for _, v := range p.Success {
      if err := v.Write(oprot); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", v), err)
      }
    }
    if err := oprot.WriteListEnd(); err != nil {
      return thrift.PrependError("error writing list end: ", err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *JMXServiceGetMBeanAttributesResult) writeField1(oprot thrift.TProtocol) (err error) {
  if p.IsSetConnErr() {
    if err := oprot.WriteFieldBegin("connErr", thrift.STRUCT, 1); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:connErr: ", p), err) }
    if err := p.ConnErr.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.ConnErr), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 1:connErr: ", p), err) }
  }
  return err
}

func (p *JMXServiceGetMBeanAttributesResult) writeField2(oprot thrift.TProtocol) (err error) {
  if p.IsSetJmxErr() {
    if err := oprot.WriteFieldBegin("jmxErr", thrift.STRUCT, 2); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:jmxErr: ", p), err) }
    if err := p.JmxErr.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.JmxErr), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 2:jmxErr: ", p), err) }
  }
  return err
}

func (p *JMXServiceGetMBeanAttributesResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("JMXServiceGetMBeanAttributesResult(%+v)", *p)
}

// Attributes:
//  - MBeanNamePattern
type JMXServiceQueryMBeanAttributesArgs struct {
  MBeanNamePattern string `thrift:"mBeanNamePattern,1" db:"mBeanNamePattern" json:"mBeanNamePattern"`
}

func NewJMXServiceQueryMBeanAttributesArgs() *JMXServiceQueryMBeanAttributesArgs {
  return &JMXServiceQueryMBeanAttributesArgs{}
}


func (p *JMXServiceQueryMBeanAttributesArgs) GetMBeanNamePattern() string {
  return p.MBeanNamePattern
}
func (p *JMXServiceQueryMBeanAttributesArgs) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *JMXServiceQueryMBeanAttributesArgs)  ReadField1(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.MBeanNamePattern = v
}
  return nil
}

func (p *JMXServiceQueryMBeanAttributesArgs) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("queryMBeanAttributes_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *JMXServiceQueryMBeanAttributesArgs) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("mBeanNamePattern", thrift.STRING, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:mBeanNamePattern: ", p), err) }
  if err := oprot.WriteString(string(p.MBeanNamePattern)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.mBeanNamePattern (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:mBeanNamePattern: ", p), err) }
  return err
}

func (p *JMXServiceQueryMBeanAttributesArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("JMXServiceQueryMBeanAttributesArgs(%+v)", *p)
}

// Attributes:
//  - Success
//  - ConnErr
//  - JmxErr
type JMXServiceQueryMBeanAttributesResult struct {
  Success []*AttributeResponse `thrift:"success,0" db:"success" json:"success,omitempty"`
  ConnErr *JMXConnectionError `thrift:"connErr,1" db:"connErr" json:"connErr,omitempty"`
  JmxErr *JMXError `thrift:"jmxErr,2" db:"jmxErr" json:"jmxErr,omitempty"`
}

func NewJMXServiceQueryMBeanAttributesResult() *JMXServiceQueryMBeanAttributesResult {
  return &JMXServiceQueryMBeanAttributesResult{}
}

var JMXServiceQueryMBeanAttributesResult_Success_DEFAULT []*AttributeResponse

func (p *JMXServiceQueryMBeanAttributesResult) GetSuccess() []*AttributeResponse {
  return p.Success
}
var JMXServiceQueryMBeanAttributesResult_ConnErr_DEFAULT *JMXConnectionError
func (p *JMXServiceQueryMBeanAttributesResult) GetConnErr() *JMXConnectionError {
  if !p.IsSetConnErr() {
    return JMXServiceQueryMBeanAttributesResult_ConnErr_DEFAULT
  }
return p.ConnErr
}
var JMXServiceQueryMBeanAttributesResult_JmxErr_DEFAULT *JMXError
func (p *JMXServiceQueryMBeanAttributesResult) GetJmxErr() *JMXError {
  if !p.IsSetJmxErr() {
    return JMXServiceQueryMBeanAttributesResult_JmxErr_DEFAULT
  }
return p.JmxErr
}
func (p *JMXServiceQueryMBeanAttributesResult) IsSetSuccess() bool {
  return p.Success != nil
}

func (p *JMXServiceQueryMBeanAttributesResult) IsSetConnErr() bool {
  return p.ConnErr != nil
}

func (p *JMXServiceQueryMBeanAttributesResult) IsSetJmxErr() bool {
  return p.JmxErr != nil
}

func (p *JMXServiceQueryMBeanAttributesResult) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if fieldTypeId == thrift.LIST {
        if err := p.ReadField0(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField2(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *JMXServiceQueryMBeanAttributesResult)  ReadField0(iprot thrift.TProtocol) error {
  _, size, err := iprot.ReadListBegin()
  if err != nil {
    return thrift.PrependError("error reading list begin: ", err)
  }
  tSlice := make([]*AttributeResponse, 0, size)
  p.Success =  tSlice
  for i := 0; i < size; i ++ {
    _elem20 := &AttributeResponse{}
    if err := _elem20.Read(iprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", _elem20), err)
    }
    p.Success = append(p.Success, _elem20)
  }
  if err := iprot.ReadListEnd(); err != nil {
    return thrift.PrependError("error reading list end: ", err)
  }
  return nil
}

func (p *JMXServiceQueryMBeanAttributesResult)  ReadField1(iprot thrift.TProtocol) error {
  p.ConnErr = &JMXConnectionError{}
  if err := p.ConnErr.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.ConnErr), err)
  }
  return nil
}

func (p *JMXServiceQueryMBeanAttributesResult)  ReadField2(iprot thrift.TProtocol) error {
  p.JmxErr = &JMXError{}
  if err := p.JmxErr.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.JmxErr), err)
  }
  return nil
}

func (p *JMXServiceQueryMBeanAttributesResult) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("queryMBeanAttributes_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField0(oprot); err != nil { return err }
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *JMXServiceQueryMBeanAttributesResult) writeField0(oprot thrift.TProtocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin("success", thrift.LIST, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := oprot.WriteListBegin(thrift.STRUCT, len(p.Success)); err != nil {
      return thrift.PrependError("error writing list begin: ", err)
    }
    for _, v := range p.Success {
      if err := v.Write(oprot); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", v), err)
      }
    }
    if err := oprot.WriteListEnd(); err != nil {
      return thrift.PrependError("error writing list end: ", err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *JMXServiceQueryMBeanAttributesResult) writeField1(oprot thrift.TProtocol) (err error) {
  if p.IsSetConnErr() {
    if err := oprot.WriteFieldBegin("connErr", thrift.STRUCT, 1); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:connErr: ", p), err) }
    if err := p.ConnErr.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.ConnErr), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 1:connErr: ", p), err) }
  }
  return err
}

func (p *JMXServiceQueryMBeanAttributesResult) writeField2(oprot thrift.TProtocol) (err error) {
  if p.IsSetJmxErr() {
    if err := oprot.WriteFieldBegin("jmxErr", thrift.STRUCT, 2); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:jmxErr: ", p), err) }
    if err := p.JmxErr.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.JmxErr), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 2:jmxErr: ", p), err) }
  }
  return err
}

func (p *JMXServiceQueryMBeanAttributesResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("JMXServiceQueryMBeanAttributesResult(%+v)", *p)
}


