/**
 * Autogenerated by Thrift Compiler (0.13.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package org.newrelic.nrjmx.v2.nrprotocol;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked", "unused"})
@javax.annotation.Generated(value = "Autogenerated by Thrift Compiler (0.13.0)", date = "2021-12-03")
public class JMXService {

  public interface Iface {

    public void connect(JMXConfig config, long timeoutMs) throws JMXConnectionError, JMXError, org.apache.thrift.TException;

    public void disconnect() throws JMXError, org.apache.thrift.TException;

    public void ping() throws JMXError, org.apache.thrift.TException;

    public java.util.List<java.lang.String> getMBeanNames(java.lang.String mBeanNamePattern, long timeoutMs) throws JMXConnectionError, JMXError, org.apache.thrift.TException;

    public java.util.List<java.lang.String> getMBeanAttrNames(java.lang.String mBeanName, long timeoutMs) throws JMXConnectionError, JMXError, org.apache.thrift.TException;

    public JMXAttribute getMBeanAttr(java.lang.String mBeanName, java.lang.String attrName, long timeoutMs) throws JMXConnectionError, JMXError, org.apache.thrift.TException;

  }

  public interface AsyncIface {

    public void connect(JMXConfig config, long timeoutMs, org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler) throws org.apache.thrift.TException;

    public void disconnect(org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler) throws org.apache.thrift.TException;

    public void ping(org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler) throws org.apache.thrift.TException;

    public void getMBeanNames(java.lang.String mBeanNamePattern, long timeoutMs, org.apache.thrift.async.AsyncMethodCallback<java.util.List<java.lang.String>> resultHandler) throws org.apache.thrift.TException;

    public void getMBeanAttrNames(java.lang.String mBeanName, long timeoutMs, org.apache.thrift.async.AsyncMethodCallback<java.util.List<java.lang.String>> resultHandler) throws org.apache.thrift.TException;

    public void getMBeanAttr(java.lang.String mBeanName, java.lang.String attrName, long timeoutMs, org.apache.thrift.async.AsyncMethodCallback<JMXAttribute> resultHandler) throws org.apache.thrift.TException;

  }

  public static class Client extends org.apache.thrift.TServiceClient implements Iface {
    public static class Factory implements org.apache.thrift.TServiceClientFactory<Client> {
      public Factory() {}
      public Client getClient(org.apache.thrift.protocol.TProtocol prot) {
        return new Client(prot);
      }
      public Client getClient(org.apache.thrift.protocol.TProtocol iprot, org.apache.thrift.protocol.TProtocol oprot) {
        return new Client(iprot, oprot);
      }
    }

    public Client(org.apache.thrift.protocol.TProtocol prot)
    {
      super(prot, prot);
    }

    public Client(org.apache.thrift.protocol.TProtocol iprot, org.apache.thrift.protocol.TProtocol oprot) {
      super(iprot, oprot);
    }

    public void connect(JMXConfig config, long timeoutMs) throws JMXConnectionError, JMXError, org.apache.thrift.TException
    {
      send_connect(config, timeoutMs);
      recv_connect();
    }

    public void send_connect(JMXConfig config, long timeoutMs) throws org.apache.thrift.TException
    {
      connect_args args = new connect_args();
      args.setConfig(config);
      args.setTimeoutMs(timeoutMs);
      sendBase("connect", args);
    }

    public void recv_connect() throws JMXConnectionError, JMXError, org.apache.thrift.TException
    {
      connect_result result = new connect_result();
      receiveBase(result, "connect");
      if (result.connErr != null) {
        throw result.connErr;
      }
      if (result.jmxErr != null) {
        throw result.jmxErr;
      }
      return;
    }

    public void disconnect() throws JMXError, org.apache.thrift.TException
    {
      send_disconnect();
      recv_disconnect();
    }

    public void send_disconnect() throws org.apache.thrift.TException
    {
      disconnect_args args = new disconnect_args();
      sendBase("disconnect", args);
    }

    public void recv_disconnect() throws JMXError, org.apache.thrift.TException
    {
      disconnect_result result = new disconnect_result();
      receiveBase(result, "disconnect");
      if (result.err != null) {
        throw result.err;
      }
      return;
    }

    public void ping() throws JMXError, org.apache.thrift.TException
    {
      send_ping();
      recv_ping();
    }

    public void send_ping() throws org.apache.thrift.TException
    {
      ping_args args = new ping_args();
      sendBase("ping", args);
    }

    public void recv_ping() throws JMXError, org.apache.thrift.TException
    {
      ping_result result = new ping_result();
      receiveBase(result, "ping");
      if (result.err != null) {
        throw result.err;
      }
      return;
    }

    public java.util.List<java.lang.String> getMBeanNames(java.lang.String mBeanNamePattern, long timeoutMs) throws JMXConnectionError, JMXError, org.apache.thrift.TException
    {
      send_getMBeanNames(mBeanNamePattern, timeoutMs);
      return recv_getMBeanNames();
    }

    public void send_getMBeanNames(java.lang.String mBeanNamePattern, long timeoutMs) throws org.apache.thrift.TException
    {
      getMBeanNames_args args = new getMBeanNames_args();
      args.setMBeanNamePattern(mBeanNamePattern);
      args.setTimeoutMs(timeoutMs);
      sendBase("getMBeanNames", args);
    }

    public java.util.List<java.lang.String> recv_getMBeanNames() throws JMXConnectionError, JMXError, org.apache.thrift.TException
    {
      getMBeanNames_result result = new getMBeanNames_result();
      receiveBase(result, "getMBeanNames");
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.connErr != null) {
        throw result.connErr;
      }
      if (result.jmxErr != null) {
        throw result.jmxErr;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "getMBeanNames failed: unknown result");
    }

    public java.util.List<java.lang.String> getMBeanAttrNames(java.lang.String mBeanName, long timeoutMs) throws JMXConnectionError, JMXError, org.apache.thrift.TException
    {
      send_getMBeanAttrNames(mBeanName, timeoutMs);
      return recv_getMBeanAttrNames();
    }

    public void send_getMBeanAttrNames(java.lang.String mBeanName, long timeoutMs) throws org.apache.thrift.TException
    {
      getMBeanAttrNames_args args = new getMBeanAttrNames_args();
      args.setMBeanName(mBeanName);
      args.setTimeoutMs(timeoutMs);
      sendBase("getMBeanAttrNames", args);
    }

    public java.util.List<java.lang.String> recv_getMBeanAttrNames() throws JMXConnectionError, JMXError, org.apache.thrift.TException
    {
      getMBeanAttrNames_result result = new getMBeanAttrNames_result();
      receiveBase(result, "getMBeanAttrNames");
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.connErr != null) {
        throw result.connErr;
      }
      if (result.jmxErr != null) {
        throw result.jmxErr;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "getMBeanAttrNames failed: unknown result");
    }

    public JMXAttribute getMBeanAttr(java.lang.String mBeanName, java.lang.String attrName, long timeoutMs) throws JMXConnectionError, JMXError, org.apache.thrift.TException
    {
      send_getMBeanAttr(mBeanName, attrName, timeoutMs);
      return recv_getMBeanAttr();
    }

    public void send_getMBeanAttr(java.lang.String mBeanName, java.lang.String attrName, long timeoutMs) throws org.apache.thrift.TException
    {
      getMBeanAttr_args args = new getMBeanAttr_args();
      args.setMBeanName(mBeanName);
      args.setAttrName(attrName);
      args.setTimeoutMs(timeoutMs);
      sendBase("getMBeanAttr", args);
    }

    public JMXAttribute recv_getMBeanAttr() throws JMXConnectionError, JMXError, org.apache.thrift.TException
    {
      getMBeanAttr_result result = new getMBeanAttr_result();
      receiveBase(result, "getMBeanAttr");
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.connErr != null) {
        throw result.connErr;
      }
      if (result.jmxErr != null) {
        throw result.jmxErr;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "getMBeanAttr failed: unknown result");
    }

  }
  public static class AsyncClient extends org.apache.thrift.async.TAsyncClient implements AsyncIface {
    public static class Factory implements org.apache.thrift.async.TAsyncClientFactory<AsyncClient> {
      private org.apache.thrift.async.TAsyncClientManager clientManager;
      private org.apache.thrift.protocol.TProtocolFactory protocolFactory;
      public Factory(org.apache.thrift.async.TAsyncClientManager clientManager, org.apache.thrift.protocol.TProtocolFactory protocolFactory) {
        this.clientManager = clientManager;
        this.protocolFactory = protocolFactory;
      }
      public AsyncClient getAsyncClient(org.apache.thrift.transport.TNonblockingTransport transport) {
        return new AsyncClient(protocolFactory, clientManager, transport);
      }
    }

    public AsyncClient(org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.async.TAsyncClientManager clientManager, org.apache.thrift.transport.TNonblockingTransport transport) {
      super(protocolFactory, clientManager, transport);
    }

    public void connect(JMXConfig config, long timeoutMs, org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      connect_call method_call = new connect_call(config, timeoutMs, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class connect_call extends org.apache.thrift.async.TAsyncMethodCall<Void> {
      private JMXConfig config;
      private long timeoutMs;
      public connect_call(JMXConfig config, long timeoutMs, org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.config = config;
        this.timeoutMs = timeoutMs;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("connect", org.apache.thrift.protocol.TMessageType.CALL, 0));
        connect_args args = new connect_args();
        args.setConfig(config);
        args.setTimeoutMs(timeoutMs);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public Void getResult() throws JMXConnectionError, JMXError, org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new java.lang.IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return null;
      }
    }

    public void disconnect(org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      disconnect_call method_call = new disconnect_call(resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class disconnect_call extends org.apache.thrift.async.TAsyncMethodCall<Void> {
      public disconnect_call(org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("disconnect", org.apache.thrift.protocol.TMessageType.CALL, 0));
        disconnect_args args = new disconnect_args();
        args.write(prot);
        prot.writeMessageEnd();
      }

      public Void getResult() throws JMXError, org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new java.lang.IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return null;
      }
    }

    public void ping(org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      ping_call method_call = new ping_call(resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class ping_call extends org.apache.thrift.async.TAsyncMethodCall<Void> {
      public ping_call(org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("ping", org.apache.thrift.protocol.TMessageType.CALL, 0));
        ping_args args = new ping_args();
        args.write(prot);
        prot.writeMessageEnd();
      }

      public Void getResult() throws JMXError, org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new java.lang.IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return null;
      }
    }

    public void getMBeanNames(java.lang.String mBeanNamePattern, long timeoutMs, org.apache.thrift.async.AsyncMethodCallback<java.util.List<java.lang.String>> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      getMBeanNames_call method_call = new getMBeanNames_call(mBeanNamePattern, timeoutMs, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class getMBeanNames_call extends org.apache.thrift.async.TAsyncMethodCall<java.util.List<java.lang.String>> {
      private java.lang.String mBeanNamePattern;
      private long timeoutMs;
      public getMBeanNames_call(java.lang.String mBeanNamePattern, long timeoutMs, org.apache.thrift.async.AsyncMethodCallback<java.util.List<java.lang.String>> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.mBeanNamePattern = mBeanNamePattern;
        this.timeoutMs = timeoutMs;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("getMBeanNames", org.apache.thrift.protocol.TMessageType.CALL, 0));
        getMBeanNames_args args = new getMBeanNames_args();
        args.setMBeanNamePattern(mBeanNamePattern);
        args.setTimeoutMs(timeoutMs);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public java.util.List<java.lang.String> getResult() throws JMXConnectionError, JMXError, org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new java.lang.IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_getMBeanNames();
      }
    }

    public void getMBeanAttrNames(java.lang.String mBeanName, long timeoutMs, org.apache.thrift.async.AsyncMethodCallback<java.util.List<java.lang.String>> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      getMBeanAttrNames_call method_call = new getMBeanAttrNames_call(mBeanName, timeoutMs, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class getMBeanAttrNames_call extends org.apache.thrift.async.TAsyncMethodCall<java.util.List<java.lang.String>> {
      private java.lang.String mBeanName;
      private long timeoutMs;
      public getMBeanAttrNames_call(java.lang.String mBeanName, long timeoutMs, org.apache.thrift.async.AsyncMethodCallback<java.util.List<java.lang.String>> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.mBeanName = mBeanName;
        this.timeoutMs = timeoutMs;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("getMBeanAttrNames", org.apache.thrift.protocol.TMessageType.CALL, 0));
        getMBeanAttrNames_args args = new getMBeanAttrNames_args();
        args.setMBeanName(mBeanName);
        args.setTimeoutMs(timeoutMs);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public java.util.List<java.lang.String> getResult() throws JMXConnectionError, JMXError, org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new java.lang.IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_getMBeanAttrNames();
      }
    }

    public void getMBeanAttr(java.lang.String mBeanName, java.lang.String attrName, long timeoutMs, org.apache.thrift.async.AsyncMethodCallback<JMXAttribute> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      getMBeanAttr_call method_call = new getMBeanAttr_call(mBeanName, attrName, timeoutMs, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class getMBeanAttr_call extends org.apache.thrift.async.TAsyncMethodCall<JMXAttribute> {
      private java.lang.String mBeanName;
      private java.lang.String attrName;
      private long timeoutMs;
      public getMBeanAttr_call(java.lang.String mBeanName, java.lang.String attrName, long timeoutMs, org.apache.thrift.async.AsyncMethodCallback<JMXAttribute> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.mBeanName = mBeanName;
        this.attrName = attrName;
        this.timeoutMs = timeoutMs;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("getMBeanAttr", org.apache.thrift.protocol.TMessageType.CALL, 0));
        getMBeanAttr_args args = new getMBeanAttr_args();
        args.setMBeanName(mBeanName);
        args.setAttrName(attrName);
        args.setTimeoutMs(timeoutMs);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public JMXAttribute getResult() throws JMXConnectionError, JMXError, org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new java.lang.IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_getMBeanAttr();
      }
    }

  }

  public static class Processor<I extends Iface> extends org.apache.thrift.TBaseProcessor<I> implements org.apache.thrift.TProcessor {
    private static final org.slf4j.Logger _LOGGER = org.slf4j.LoggerFactory.getLogger(Processor.class.getName());
    public Processor(I iface) {
      super(iface, getProcessMap(new java.util.HashMap<java.lang.String, org.apache.thrift.ProcessFunction<I, ? extends org.apache.thrift.TBase>>()));
    }

    protected Processor(I iface, java.util.Map<java.lang.String, org.apache.thrift.ProcessFunction<I, ? extends org.apache.thrift.TBase>> processMap) {
      super(iface, getProcessMap(processMap));
    }

    private static <I extends Iface> java.util.Map<java.lang.String,  org.apache.thrift.ProcessFunction<I, ? extends org.apache.thrift.TBase>> getProcessMap(java.util.Map<java.lang.String, org.apache.thrift.ProcessFunction<I, ? extends  org.apache.thrift.TBase>> processMap) {
      processMap.put("connect", new connect());
      processMap.put("disconnect", new disconnect());
      processMap.put("ping", new ping());
      processMap.put("getMBeanNames", new getMBeanNames());
      processMap.put("getMBeanAttrNames", new getMBeanAttrNames());
      processMap.put("getMBeanAttr", new getMBeanAttr());
      return processMap;
    }

    public static class connect<I extends Iface> extends org.apache.thrift.ProcessFunction<I, connect_args> {
      public connect() {
        super("connect");
      }

      public connect_args getEmptyArgsInstance() {
        return new connect_args();
      }

      protected boolean isOneway() {
        return false;
      }

      @Override
      protected boolean rethrowUnhandledExceptions() {
        return false;
      }

      public connect_result getResult(I iface, connect_args args) throws org.apache.thrift.TException {
        connect_result result = new connect_result();
        try {
          iface.connect(args.config, args.timeoutMs);
        } catch (JMXConnectionError connErr) {
          result.connErr = connErr;
        } catch (JMXError jmxErr) {
          result.jmxErr = jmxErr;
        }
        return result;
      }
    }

    public static class disconnect<I extends Iface> extends org.apache.thrift.ProcessFunction<I, disconnect_args> {
      public disconnect() {
        super("disconnect");
      }

      public disconnect_args getEmptyArgsInstance() {
        return new disconnect_args();
      }

      protected boolean isOneway() {
        return false;
      }

      @Override
      protected boolean rethrowUnhandledExceptions() {
        return false;
      }

      public disconnect_result getResult(I iface, disconnect_args args) throws org.apache.thrift.TException {
        disconnect_result result = new disconnect_result();
        try {
          iface.disconnect();
        } catch (JMXError err) {
          result.err = err;
        }
        return result;
      }
    }

    public static class ping<I extends Iface> extends org.apache.thrift.ProcessFunction<I, ping_args> {
      public ping() {
        super("ping");
      }

      public ping_args getEmptyArgsInstance() {
        return new ping_args();
      }

      protected boolean isOneway() {
        return false;
      }

      @Override
      protected boolean rethrowUnhandledExceptions() {
        return false;
      }

      public ping_result getResult(I iface, ping_args args) throws org.apache.thrift.TException {
        ping_result result = new ping_result();
        try {
          iface.ping();
        } catch (JMXError err) {
          result.err = err;
        }
        return result;
      }
    }

    public static class getMBeanNames<I extends Iface> extends org.apache.thrift.ProcessFunction<I, getMBeanNames_args> {
      public getMBeanNames() {
        super("getMBeanNames");
      }

      public getMBeanNames_args getEmptyArgsInstance() {
        return new getMBeanNames_args();
      }

      protected boolean isOneway() {
        return false;
      }

      @Override
      protected boolean rethrowUnhandledExceptions() {
        return false;
      }

      public getMBeanNames_result getResult(I iface, getMBeanNames_args args) throws org.apache.thrift.TException {
        getMBeanNames_result result = new getMBeanNames_result();
        try {
          result.success = iface.getMBeanNames(args.mBeanNamePattern, args.timeoutMs);
        } catch (JMXConnectionError connErr) {
          result.connErr = connErr;
        } catch (JMXError jmxErr) {
          result.jmxErr = jmxErr;
        }
        return result;
      }
    }

    public static class getMBeanAttrNames<I extends Iface> extends org.apache.thrift.ProcessFunction<I, getMBeanAttrNames_args> {
      public getMBeanAttrNames() {
        super("getMBeanAttrNames");
      }

      public getMBeanAttrNames_args getEmptyArgsInstance() {
        return new getMBeanAttrNames_args();
      }

      protected boolean isOneway() {
        return false;
      }

      @Override
      protected boolean rethrowUnhandledExceptions() {
        return false;
      }

      public getMBeanAttrNames_result getResult(I iface, getMBeanAttrNames_args args) throws org.apache.thrift.TException {
        getMBeanAttrNames_result result = new getMBeanAttrNames_result();
        try {
          result.success = iface.getMBeanAttrNames(args.mBeanName, args.timeoutMs);
        } catch (JMXConnectionError connErr) {
          result.connErr = connErr;
        } catch (JMXError jmxErr) {
          result.jmxErr = jmxErr;
        }
        return result;
      }
    }

    public static class getMBeanAttr<I extends Iface> extends org.apache.thrift.ProcessFunction<I, getMBeanAttr_args> {
      public getMBeanAttr() {
        super("getMBeanAttr");
      }

      public getMBeanAttr_args getEmptyArgsInstance() {
        return new getMBeanAttr_args();
      }

      protected boolean isOneway() {
        return false;
      }

      @Override
      protected boolean rethrowUnhandledExceptions() {
        return false;
      }

      public getMBeanAttr_result getResult(I iface, getMBeanAttr_args args) throws org.apache.thrift.TException {
        getMBeanAttr_result result = new getMBeanAttr_result();
        try {
          result.success = iface.getMBeanAttr(args.mBeanName, args.attrName, args.timeoutMs);
        } catch (JMXConnectionError connErr) {
          result.connErr = connErr;
        } catch (JMXError jmxErr) {
          result.jmxErr = jmxErr;
        }
        return result;
      }
    }

  }

  public static class AsyncProcessor<I extends AsyncIface> extends org.apache.thrift.TBaseAsyncProcessor<I> {
    private static final org.slf4j.Logger _LOGGER = org.slf4j.LoggerFactory.getLogger(AsyncProcessor.class.getName());
    public AsyncProcessor(I iface) {
      super(iface, getProcessMap(new java.util.HashMap<java.lang.String, org.apache.thrift.AsyncProcessFunction<I, ? extends org.apache.thrift.TBase, ?>>()));
    }

    protected AsyncProcessor(I iface, java.util.Map<java.lang.String,  org.apache.thrift.AsyncProcessFunction<I, ? extends  org.apache.thrift.TBase, ?>> processMap) {
      super(iface, getProcessMap(processMap));
    }

    private static <I extends AsyncIface> java.util.Map<java.lang.String,  org.apache.thrift.AsyncProcessFunction<I, ? extends  org.apache.thrift.TBase,?>> getProcessMap(java.util.Map<java.lang.String,  org.apache.thrift.AsyncProcessFunction<I, ? extends  org.apache.thrift.TBase, ?>> processMap) {
      processMap.put("connect", new connect());
      processMap.put("disconnect", new disconnect());
      processMap.put("ping", new ping());
      processMap.put("getMBeanNames", new getMBeanNames());
      processMap.put("getMBeanAttrNames", new getMBeanAttrNames());
      processMap.put("getMBeanAttr", new getMBeanAttr());
      return processMap;
    }

    public static class connect<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, connect_args, Void> {
      public connect() {
        super("connect");
      }

      public connect_args getEmptyArgsInstance() {
        return new connect_args();
      }

      public org.apache.thrift.async.AsyncMethodCallback<Void> getResultHandler(final org.apache.thrift.server.AbstractNonblockingServer.AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new org.apache.thrift.async.AsyncMethodCallback<Void>() { 
          public void onComplete(Void o) {
            connect_result result = new connect_result();
            try {
              fcall.sendResponse(fb, result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
            } catch (org.apache.thrift.transport.TTransportException e) {
              _LOGGER.error("TTransportException writing to internal frame buffer", e);
              fb.close();
            } catch (java.lang.Exception e) {
              _LOGGER.error("Exception writing to internal frame buffer", e);
              onError(e);
            }
          }
          public void onError(java.lang.Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TSerializable msg;
            connect_result result = new connect_result();
            if (e instanceof JMXConnectionError) {
              result.connErr = (JMXConnectionError) e;
              result.setConnErrIsSet(true);
              msg = result;
            } else if (e instanceof JMXError) {
              result.jmxErr = (JMXError) e;
              result.setJmxErrIsSet(true);
              msg = result;
            } else if (e instanceof org.apache.thrift.transport.TTransportException) {
              _LOGGER.error("TTransportException inside handler", e);
              fb.close();
              return;
            } else if (e instanceof org.apache.thrift.TApplicationException) {
              _LOGGER.error("TApplicationException inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TApplicationException)e;
            } else {
              _LOGGER.error("Exception inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
            } catch (java.lang.Exception ex) {
              _LOGGER.error("Exception writing to internal frame buffer", ex);
              fb.close();
            }
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, connect_args args, org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler) throws org.apache.thrift.TException {
        iface.connect(args.config, args.timeoutMs,resultHandler);
      }
    }

    public static class disconnect<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, disconnect_args, Void> {
      public disconnect() {
        super("disconnect");
      }

      public disconnect_args getEmptyArgsInstance() {
        return new disconnect_args();
      }

      public org.apache.thrift.async.AsyncMethodCallback<Void> getResultHandler(final org.apache.thrift.server.AbstractNonblockingServer.AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new org.apache.thrift.async.AsyncMethodCallback<Void>() { 
          public void onComplete(Void o) {
            disconnect_result result = new disconnect_result();
            try {
              fcall.sendResponse(fb, result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
            } catch (org.apache.thrift.transport.TTransportException e) {
              _LOGGER.error("TTransportException writing to internal frame buffer", e);
              fb.close();
            } catch (java.lang.Exception e) {
              _LOGGER.error("Exception writing to internal frame buffer", e);
              onError(e);
            }
          }
          public void onError(java.lang.Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TSerializable msg;
            disconnect_result result = new disconnect_result();
            if (e instanceof JMXError) {
              result.err = (JMXError) e;
              result.setErrIsSet(true);
              msg = result;
            } else if (e instanceof org.apache.thrift.transport.TTransportException) {
              _LOGGER.error("TTransportException inside handler", e);
              fb.close();
              return;
            } else if (e instanceof org.apache.thrift.TApplicationException) {
              _LOGGER.error("TApplicationException inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TApplicationException)e;
            } else {
              _LOGGER.error("Exception inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
            } catch (java.lang.Exception ex) {
              _LOGGER.error("Exception writing to internal frame buffer", ex);
              fb.close();
            }
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, disconnect_args args, org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler) throws org.apache.thrift.TException {
        iface.disconnect(resultHandler);
      }
    }

    public static class ping<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, ping_args, Void> {
      public ping() {
        super("ping");
      }

      public ping_args getEmptyArgsInstance() {
        return new ping_args();
      }

      public org.apache.thrift.async.AsyncMethodCallback<Void> getResultHandler(final org.apache.thrift.server.AbstractNonblockingServer.AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new org.apache.thrift.async.AsyncMethodCallback<Void>() { 
          public void onComplete(Void o) {
            ping_result result = new ping_result();
            try {
              fcall.sendResponse(fb, result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
            } catch (org.apache.thrift.transport.TTransportException e) {
              _LOGGER.error("TTransportException writing to internal frame buffer", e);
              fb.close();
            } catch (java.lang.Exception e) {
              _LOGGER.error("Exception writing to internal frame buffer", e);
              onError(e);
            }
          }
          public void onError(java.lang.Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TSerializable msg;
            ping_result result = new ping_result();
            if (e instanceof JMXError) {
              result.err = (JMXError) e;
              result.setErrIsSet(true);
              msg = result;
            } else if (e instanceof org.apache.thrift.transport.TTransportException) {
              _LOGGER.error("TTransportException inside handler", e);
              fb.close();
              return;
            } else if (e instanceof org.apache.thrift.TApplicationException) {
              _LOGGER.error("TApplicationException inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TApplicationException)e;
            } else {
              _LOGGER.error("Exception inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
            } catch (java.lang.Exception ex) {
              _LOGGER.error("Exception writing to internal frame buffer", ex);
              fb.close();
            }
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, ping_args args, org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler) throws org.apache.thrift.TException {
        iface.ping(resultHandler);
      }
    }

    public static class getMBeanNames<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, getMBeanNames_args, java.util.List<java.lang.String>> {
      public getMBeanNames() {
        super("getMBeanNames");
      }

      public getMBeanNames_args getEmptyArgsInstance() {
        return new getMBeanNames_args();
      }

      public org.apache.thrift.async.AsyncMethodCallback<java.util.List<java.lang.String>> getResultHandler(final org.apache.thrift.server.AbstractNonblockingServer.AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new org.apache.thrift.async.AsyncMethodCallback<java.util.List<java.lang.String>>() { 
          public void onComplete(java.util.List<java.lang.String> o) {
            getMBeanNames_result result = new getMBeanNames_result();
            result.success = o;
            try {
              fcall.sendResponse(fb, result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
            } catch (org.apache.thrift.transport.TTransportException e) {
              _LOGGER.error("TTransportException writing to internal frame buffer", e);
              fb.close();
            } catch (java.lang.Exception e) {
              _LOGGER.error("Exception writing to internal frame buffer", e);
              onError(e);
            }
          }
          public void onError(java.lang.Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TSerializable msg;
            getMBeanNames_result result = new getMBeanNames_result();
            if (e instanceof JMXConnectionError) {
              result.connErr = (JMXConnectionError) e;
              result.setConnErrIsSet(true);
              msg = result;
            } else if (e instanceof JMXError) {
              result.jmxErr = (JMXError) e;
              result.setJmxErrIsSet(true);
              msg = result;
            } else if (e instanceof org.apache.thrift.transport.TTransportException) {
              _LOGGER.error("TTransportException inside handler", e);
              fb.close();
              return;
            } else if (e instanceof org.apache.thrift.TApplicationException) {
              _LOGGER.error("TApplicationException inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TApplicationException)e;
            } else {
              _LOGGER.error("Exception inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
            } catch (java.lang.Exception ex) {
              _LOGGER.error("Exception writing to internal frame buffer", ex);
              fb.close();
            }
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, getMBeanNames_args args, org.apache.thrift.async.AsyncMethodCallback<java.util.List<java.lang.String>> resultHandler) throws org.apache.thrift.TException {
        iface.getMBeanNames(args.mBeanNamePattern, args.timeoutMs,resultHandler);
      }
    }

    public static class getMBeanAttrNames<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, getMBeanAttrNames_args, java.util.List<java.lang.String>> {
      public getMBeanAttrNames() {
        super("getMBeanAttrNames");
      }

      public getMBeanAttrNames_args getEmptyArgsInstance() {
        return new getMBeanAttrNames_args();
      }

      public org.apache.thrift.async.AsyncMethodCallback<java.util.List<java.lang.String>> getResultHandler(final org.apache.thrift.server.AbstractNonblockingServer.AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new org.apache.thrift.async.AsyncMethodCallback<java.util.List<java.lang.String>>() { 
          public void onComplete(java.util.List<java.lang.String> o) {
            getMBeanAttrNames_result result = new getMBeanAttrNames_result();
            result.success = o;
            try {
              fcall.sendResponse(fb, result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
            } catch (org.apache.thrift.transport.TTransportException e) {
              _LOGGER.error("TTransportException writing to internal frame buffer", e);
              fb.close();
            } catch (java.lang.Exception e) {
              _LOGGER.error("Exception writing to internal frame buffer", e);
              onError(e);
            }
          }
          public void onError(java.lang.Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TSerializable msg;
            getMBeanAttrNames_result result = new getMBeanAttrNames_result();
            if (e instanceof JMXConnectionError) {
              result.connErr = (JMXConnectionError) e;
              result.setConnErrIsSet(true);
              msg = result;
            } else if (e instanceof JMXError) {
              result.jmxErr = (JMXError) e;
              result.setJmxErrIsSet(true);
              msg = result;
            } else if (e instanceof org.apache.thrift.transport.TTransportException) {
              _LOGGER.error("TTransportException inside handler", e);
              fb.close();
              return;
            } else if (e instanceof org.apache.thrift.TApplicationException) {
              _LOGGER.error("TApplicationException inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TApplicationException)e;
            } else {
              _LOGGER.error("Exception inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
            } catch (java.lang.Exception ex) {
              _LOGGER.error("Exception writing to internal frame buffer", ex);
              fb.close();
            }
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, getMBeanAttrNames_args args, org.apache.thrift.async.AsyncMethodCallback<java.util.List<java.lang.String>> resultHandler) throws org.apache.thrift.TException {
        iface.getMBeanAttrNames(args.mBeanName, args.timeoutMs,resultHandler);
      }
    }

    public static class getMBeanAttr<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, getMBeanAttr_args, JMXAttribute> {
      public getMBeanAttr() {
        super("getMBeanAttr");
      }

      public getMBeanAttr_args getEmptyArgsInstance() {
        return new getMBeanAttr_args();
      }

      public org.apache.thrift.async.AsyncMethodCallback<JMXAttribute> getResultHandler(final org.apache.thrift.server.AbstractNonblockingServer.AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new org.apache.thrift.async.AsyncMethodCallback<JMXAttribute>() { 
          public void onComplete(JMXAttribute o) {
            getMBeanAttr_result result = new getMBeanAttr_result();
            result.success = o;
            try {
              fcall.sendResponse(fb, result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
            } catch (org.apache.thrift.transport.TTransportException e) {
              _LOGGER.error("TTransportException writing to internal frame buffer", e);
              fb.close();
            } catch (java.lang.Exception e) {
              _LOGGER.error("Exception writing to internal frame buffer", e);
              onError(e);
            }
          }
          public void onError(java.lang.Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TSerializable msg;
            getMBeanAttr_result result = new getMBeanAttr_result();
            if (e instanceof JMXConnectionError) {
              result.connErr = (JMXConnectionError) e;
              result.setConnErrIsSet(true);
              msg = result;
            } else if (e instanceof JMXError) {
              result.jmxErr = (JMXError) e;
              result.setJmxErrIsSet(true);
              msg = result;
            } else if (e instanceof org.apache.thrift.transport.TTransportException) {
              _LOGGER.error("TTransportException inside handler", e);
              fb.close();
              return;
            } else if (e instanceof org.apache.thrift.TApplicationException) {
              _LOGGER.error("TApplicationException inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TApplicationException)e;
            } else {
              _LOGGER.error("Exception inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
            } catch (java.lang.Exception ex) {
              _LOGGER.error("Exception writing to internal frame buffer", ex);
              fb.close();
            }
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, getMBeanAttr_args args, org.apache.thrift.async.AsyncMethodCallback<JMXAttribute> resultHandler) throws org.apache.thrift.TException {
        iface.getMBeanAttr(args.mBeanName, args.attrName, args.timeoutMs,resultHandler);
      }
    }

  }

  public static class connect_args implements org.apache.thrift.TBase<connect_args, connect_args._Fields>, java.io.Serializable, Cloneable, Comparable<connect_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("connect_args");

    private static final org.apache.thrift.protocol.TField CONFIG_FIELD_DESC = new org.apache.thrift.protocol.TField("config", org.apache.thrift.protocol.TType.STRUCT, (short)1);
    private static final org.apache.thrift.protocol.TField TIMEOUT_MS_FIELD_DESC = new org.apache.thrift.protocol.TField("timeoutMs", org.apache.thrift.protocol.TType.I64, (short)2);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new connect_argsStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new connect_argsTupleSchemeFactory();

    public @org.apache.thrift.annotation.Nullable JMXConfig config; // required
    public long timeoutMs; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      CONFIG((short)1, "config"),
      TIMEOUT_MS((short)2, "timeoutMs");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      @org.apache.thrift.annotation.Nullable
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // CONFIG
            return CONFIG;
          case 2: // TIMEOUT_MS
            return TIMEOUT_MS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      @org.apache.thrift.annotation.Nullable
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __TIMEOUTMS_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.CONFIG, new org.apache.thrift.meta_data.FieldMetaData("config", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, JMXConfig.class)));
      tmpMap.put(_Fields.TIMEOUT_MS, new org.apache.thrift.meta_data.FieldMetaData("timeoutMs", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(connect_args.class, metaDataMap);
    }

    public connect_args() {
    }

    public connect_args(
      JMXConfig config,
      long timeoutMs)
    {
      this();
      this.config = config;
      this.timeoutMs = timeoutMs;
      setTimeoutMsIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public connect_args(connect_args other) {
      __isset_bitfield = other.__isset_bitfield;
      if (other.isSetConfig()) {
        this.config = new JMXConfig(other.config);
      }
      this.timeoutMs = other.timeoutMs;
    }

    public connect_args deepCopy() {
      return new connect_args(this);
    }

    @Override
    public void clear() {
      this.config = null;
      setTimeoutMsIsSet(false);
      this.timeoutMs = 0;
    }

    @org.apache.thrift.annotation.Nullable
    public JMXConfig getConfig() {
      return this.config;
    }

    public connect_args setConfig(@org.apache.thrift.annotation.Nullable JMXConfig config) {
      this.config = config;
      return this;
    }

    public void unsetConfig() {
      this.config = null;
    }

    /** Returns true if field config is set (has been assigned a value) and false otherwise */
    public boolean isSetConfig() {
      return this.config != null;
    }

    public void setConfigIsSet(boolean value) {
      if (!value) {
        this.config = null;
      }
    }

    public long getTimeoutMs() {
      return this.timeoutMs;
    }

    public connect_args setTimeoutMs(long timeoutMs) {
      this.timeoutMs = timeoutMs;
      setTimeoutMsIsSet(true);
      return this;
    }

    public void unsetTimeoutMs() {
      __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __TIMEOUTMS_ISSET_ID);
    }

    /** Returns true if field timeoutMs is set (has been assigned a value) and false otherwise */
    public boolean isSetTimeoutMs() {
      return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __TIMEOUTMS_ISSET_ID);
    }

    public void setTimeoutMsIsSet(boolean value) {
      __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __TIMEOUTMS_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, @org.apache.thrift.annotation.Nullable java.lang.Object value) {
      switch (field) {
      case CONFIG:
        if (value == null) {
          unsetConfig();
        } else {
          setConfig((JMXConfig)value);
        }
        break;

      case TIMEOUT_MS:
        if (value == null) {
          unsetTimeoutMs();
        } else {
          setTimeoutMs((java.lang.Long)value);
        }
        break;

      }
    }

    @org.apache.thrift.annotation.Nullable
    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case CONFIG:
        return getConfig();

      case TIMEOUT_MS:
        return getTimeoutMs();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case CONFIG:
        return isSetConfig();
      case TIMEOUT_MS:
        return isSetTimeoutMs();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that == null)
        return false;
      if (that instanceof connect_args)
        return this.equals((connect_args)that);
      return false;
    }

    public boolean equals(connect_args that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_config = true && this.isSetConfig();
      boolean that_present_config = true && that.isSetConfig();
      if (this_present_config || that_present_config) {
        if (!(this_present_config && that_present_config))
          return false;
        if (!this.config.equals(that.config))
          return false;
      }

      boolean this_present_timeoutMs = true;
      boolean that_present_timeoutMs = true;
      if (this_present_timeoutMs || that_present_timeoutMs) {
        if (!(this_present_timeoutMs && that_present_timeoutMs))
          return false;
        if (this.timeoutMs != that.timeoutMs)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetConfig()) ? 131071 : 524287);
      if (isSetConfig())
        hashCode = hashCode * 8191 + config.hashCode();

      hashCode = hashCode * 8191 + org.apache.thrift.TBaseHelper.hashCode(timeoutMs);

      return hashCode;
    }

    @Override
    public int compareTo(connect_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.valueOf(isSetConfig()).compareTo(other.isSetConfig());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetConfig()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.config, other.config);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.valueOf(isSetTimeoutMs()).compareTo(other.isSetTimeoutMs());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetTimeoutMs()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.timeoutMs, other.timeoutMs);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    @org.apache.thrift.annotation.Nullable
    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
    }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("connect_args(");
      boolean first = true;

      sb.append("config:");
      if (this.config == null) {
        sb.append("null");
      } else {
        sb.append(this.config);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("timeoutMs:");
      sb.append(this.timeoutMs);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (config != null) {
        config.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class connect_argsStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public connect_argsStandardScheme getScheme() {
        return new connect_argsStandardScheme();
      }
    }

    private static class connect_argsStandardScheme extends org.apache.thrift.scheme.StandardScheme<connect_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, connect_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // CONFIG
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.config = new JMXConfig();
                struct.config.read(iprot);
                struct.setConfigIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // TIMEOUT_MS
              if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
                struct.timeoutMs = iprot.readI64();
                struct.setTimeoutMsIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, connect_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.config != null) {
          oprot.writeFieldBegin(CONFIG_FIELD_DESC);
          struct.config.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldBegin(TIMEOUT_MS_FIELD_DESC);
        oprot.writeI64(struct.timeoutMs);
        oprot.writeFieldEnd();
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class connect_argsTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public connect_argsTupleScheme getScheme() {
        return new connect_argsTupleScheme();
      }
    }

    private static class connect_argsTupleScheme extends org.apache.thrift.scheme.TupleScheme<connect_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, connect_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetConfig()) {
          optionals.set(0);
        }
        if (struct.isSetTimeoutMs()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetConfig()) {
          struct.config.write(oprot);
        }
        if (struct.isSetTimeoutMs()) {
          oprot.writeI64(struct.timeoutMs);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, connect_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.config = new JMXConfig();
          struct.config.read(iprot);
          struct.setConfigIsSet(true);
        }
        if (incoming.get(1)) {
          struct.timeoutMs = iprot.readI64();
          struct.setTimeoutMsIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class connect_result implements org.apache.thrift.TBase<connect_result, connect_result._Fields>, java.io.Serializable, Cloneable, Comparable<connect_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("connect_result");

    private static final org.apache.thrift.protocol.TField CONN_ERR_FIELD_DESC = new org.apache.thrift.protocol.TField("connErr", org.apache.thrift.protocol.TType.STRUCT, (short)1);
    private static final org.apache.thrift.protocol.TField JMX_ERR_FIELD_DESC = new org.apache.thrift.protocol.TField("jmxErr", org.apache.thrift.protocol.TType.STRUCT, (short)2);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new connect_resultStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new connect_resultTupleSchemeFactory();

    public @org.apache.thrift.annotation.Nullable JMXConnectionError connErr; // required
    public @org.apache.thrift.annotation.Nullable JMXError jmxErr; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      CONN_ERR((short)1, "connErr"),
      JMX_ERR((short)2, "jmxErr");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      @org.apache.thrift.annotation.Nullable
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // CONN_ERR
            return CONN_ERR;
          case 2: // JMX_ERR
            return JMX_ERR;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      @org.apache.thrift.annotation.Nullable
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.CONN_ERR, new org.apache.thrift.meta_data.FieldMetaData("connErr", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, JMXConnectionError.class)));
      tmpMap.put(_Fields.JMX_ERR, new org.apache.thrift.meta_data.FieldMetaData("jmxErr", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, JMXError.class)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(connect_result.class, metaDataMap);
    }

    public connect_result() {
    }

    public connect_result(
      JMXConnectionError connErr,
      JMXError jmxErr)
    {
      this();
      this.connErr = connErr;
      this.jmxErr = jmxErr;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public connect_result(connect_result other) {
      if (other.isSetConnErr()) {
        this.connErr = new JMXConnectionError(other.connErr);
      }
      if (other.isSetJmxErr()) {
        this.jmxErr = new JMXError(other.jmxErr);
      }
    }

    public connect_result deepCopy() {
      return new connect_result(this);
    }

    @Override
    public void clear() {
      this.connErr = null;
      this.jmxErr = null;
    }

    @org.apache.thrift.annotation.Nullable
    public JMXConnectionError getConnErr() {
      return this.connErr;
    }

    public connect_result setConnErr(@org.apache.thrift.annotation.Nullable JMXConnectionError connErr) {
      this.connErr = connErr;
      return this;
    }

    public void unsetConnErr() {
      this.connErr = null;
    }

    /** Returns true if field connErr is set (has been assigned a value) and false otherwise */
    public boolean isSetConnErr() {
      return this.connErr != null;
    }

    public void setConnErrIsSet(boolean value) {
      if (!value) {
        this.connErr = null;
      }
    }

    @org.apache.thrift.annotation.Nullable
    public JMXError getJmxErr() {
      return this.jmxErr;
    }

    public connect_result setJmxErr(@org.apache.thrift.annotation.Nullable JMXError jmxErr) {
      this.jmxErr = jmxErr;
      return this;
    }

    public void unsetJmxErr() {
      this.jmxErr = null;
    }

    /** Returns true if field jmxErr is set (has been assigned a value) and false otherwise */
    public boolean isSetJmxErr() {
      return this.jmxErr != null;
    }

    public void setJmxErrIsSet(boolean value) {
      if (!value) {
        this.jmxErr = null;
      }
    }

    public void setFieldValue(_Fields field, @org.apache.thrift.annotation.Nullable java.lang.Object value) {
      switch (field) {
      case CONN_ERR:
        if (value == null) {
          unsetConnErr();
        } else {
          setConnErr((JMXConnectionError)value);
        }
        break;

      case JMX_ERR:
        if (value == null) {
          unsetJmxErr();
        } else {
          setJmxErr((JMXError)value);
        }
        break;

      }
    }

    @org.apache.thrift.annotation.Nullable
    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case CONN_ERR:
        return getConnErr();

      case JMX_ERR:
        return getJmxErr();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case CONN_ERR:
        return isSetConnErr();
      case JMX_ERR:
        return isSetJmxErr();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that == null)
        return false;
      if (that instanceof connect_result)
        return this.equals((connect_result)that);
      return false;
    }

    public boolean equals(connect_result that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_connErr = true && this.isSetConnErr();
      boolean that_present_connErr = true && that.isSetConnErr();
      if (this_present_connErr || that_present_connErr) {
        if (!(this_present_connErr && that_present_connErr))
          return false;
        if (!this.connErr.equals(that.connErr))
          return false;
      }

      boolean this_present_jmxErr = true && this.isSetJmxErr();
      boolean that_present_jmxErr = true && that.isSetJmxErr();
      if (this_present_jmxErr || that_present_jmxErr) {
        if (!(this_present_jmxErr && that_present_jmxErr))
          return false;
        if (!this.jmxErr.equals(that.jmxErr))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetConnErr()) ? 131071 : 524287);
      if (isSetConnErr())
        hashCode = hashCode * 8191 + connErr.hashCode();

      hashCode = hashCode * 8191 + ((isSetJmxErr()) ? 131071 : 524287);
      if (isSetJmxErr())
        hashCode = hashCode * 8191 + jmxErr.hashCode();

      return hashCode;
    }

    @Override
    public int compareTo(connect_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.valueOf(isSetConnErr()).compareTo(other.isSetConnErr());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetConnErr()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.connErr, other.connErr);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.valueOf(isSetJmxErr()).compareTo(other.isSetJmxErr());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetJmxErr()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.jmxErr, other.jmxErr);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    @org.apache.thrift.annotation.Nullable
    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
      }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("connect_result(");
      boolean first = true;

      sb.append("connErr:");
      if (this.connErr == null) {
        sb.append("null");
      } else {
        sb.append(this.connErr);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("jmxErr:");
      if (this.jmxErr == null) {
        sb.append("null");
      } else {
        sb.append(this.jmxErr);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class connect_resultStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public connect_resultStandardScheme getScheme() {
        return new connect_resultStandardScheme();
      }
    }

    private static class connect_resultStandardScheme extends org.apache.thrift.scheme.StandardScheme<connect_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, connect_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // CONN_ERR
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.connErr = new JMXConnectionError();
                struct.connErr.read(iprot);
                struct.setConnErrIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // JMX_ERR
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.jmxErr = new JMXError();
                struct.jmxErr.read(iprot);
                struct.setJmxErrIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, connect_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.connErr != null) {
          oprot.writeFieldBegin(CONN_ERR_FIELD_DESC);
          struct.connErr.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.jmxErr != null) {
          oprot.writeFieldBegin(JMX_ERR_FIELD_DESC);
          struct.jmxErr.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class connect_resultTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public connect_resultTupleScheme getScheme() {
        return new connect_resultTupleScheme();
      }
    }

    private static class connect_resultTupleScheme extends org.apache.thrift.scheme.TupleScheme<connect_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, connect_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetConnErr()) {
          optionals.set(0);
        }
        if (struct.isSetJmxErr()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetConnErr()) {
          struct.connErr.write(oprot);
        }
        if (struct.isSetJmxErr()) {
          struct.jmxErr.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, connect_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.connErr = new JMXConnectionError();
          struct.connErr.read(iprot);
          struct.setConnErrIsSet(true);
        }
        if (incoming.get(1)) {
          struct.jmxErr = new JMXError();
          struct.jmxErr.read(iprot);
          struct.setJmxErrIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class disconnect_args implements org.apache.thrift.TBase<disconnect_args, disconnect_args._Fields>, java.io.Serializable, Cloneable, Comparable<disconnect_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("disconnect_args");


    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new disconnect_argsStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new disconnect_argsTupleSchemeFactory();


    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
;

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      @org.apache.thrift.annotation.Nullable
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      @org.apache.thrift.annotation.Nullable
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(disconnect_args.class, metaDataMap);
    }

    public disconnect_args() {
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public disconnect_args(disconnect_args other) {
    }

    public disconnect_args deepCopy() {
      return new disconnect_args(this);
    }

    @Override
    public void clear() {
    }

    public void setFieldValue(_Fields field, @org.apache.thrift.annotation.Nullable java.lang.Object value) {
      switch (field) {
      }
    }

    @org.apache.thrift.annotation.Nullable
    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that == null)
        return false;
      if (that instanceof disconnect_args)
        return this.equals((disconnect_args)that);
      return false;
    }

    public boolean equals(disconnect_args that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      return hashCode;
    }

    @Override
    public int compareTo(disconnect_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      return 0;
    }

    @org.apache.thrift.annotation.Nullable
    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
    }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("disconnect_args(");
      boolean first = true;

      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class disconnect_argsStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public disconnect_argsStandardScheme getScheme() {
        return new disconnect_argsStandardScheme();
      }
    }

    private static class disconnect_argsStandardScheme extends org.apache.thrift.scheme.StandardScheme<disconnect_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, disconnect_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, disconnect_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class disconnect_argsTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public disconnect_argsTupleScheme getScheme() {
        return new disconnect_argsTupleScheme();
      }
    }

    private static class disconnect_argsTupleScheme extends org.apache.thrift.scheme.TupleScheme<disconnect_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, disconnect_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, disconnect_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class disconnect_result implements org.apache.thrift.TBase<disconnect_result, disconnect_result._Fields>, java.io.Serializable, Cloneable, Comparable<disconnect_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("disconnect_result");

    private static final org.apache.thrift.protocol.TField ERR_FIELD_DESC = new org.apache.thrift.protocol.TField("err", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new disconnect_resultStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new disconnect_resultTupleSchemeFactory();

    public @org.apache.thrift.annotation.Nullable JMXError err; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      ERR((short)1, "err");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      @org.apache.thrift.annotation.Nullable
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // ERR
            return ERR;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      @org.apache.thrift.annotation.Nullable
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.ERR, new org.apache.thrift.meta_data.FieldMetaData("err", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, JMXError.class)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(disconnect_result.class, metaDataMap);
    }

    public disconnect_result() {
    }

    public disconnect_result(
      JMXError err)
    {
      this();
      this.err = err;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public disconnect_result(disconnect_result other) {
      if (other.isSetErr()) {
        this.err = new JMXError(other.err);
      }
    }

    public disconnect_result deepCopy() {
      return new disconnect_result(this);
    }

    @Override
    public void clear() {
      this.err = null;
    }

    @org.apache.thrift.annotation.Nullable
    public JMXError getErr() {
      return this.err;
    }

    public disconnect_result setErr(@org.apache.thrift.annotation.Nullable JMXError err) {
      this.err = err;
      return this;
    }

    public void unsetErr() {
      this.err = null;
    }

    /** Returns true if field err is set (has been assigned a value) and false otherwise */
    public boolean isSetErr() {
      return this.err != null;
    }

    public void setErrIsSet(boolean value) {
      if (!value) {
        this.err = null;
      }
    }

    public void setFieldValue(_Fields field, @org.apache.thrift.annotation.Nullable java.lang.Object value) {
      switch (field) {
      case ERR:
        if (value == null) {
          unsetErr();
        } else {
          setErr((JMXError)value);
        }
        break;

      }
    }

    @org.apache.thrift.annotation.Nullable
    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case ERR:
        return getErr();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case ERR:
        return isSetErr();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that == null)
        return false;
      if (that instanceof disconnect_result)
        return this.equals((disconnect_result)that);
      return false;
    }

    public boolean equals(disconnect_result that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_err = true && this.isSetErr();
      boolean that_present_err = true && that.isSetErr();
      if (this_present_err || that_present_err) {
        if (!(this_present_err && that_present_err))
          return false;
        if (!this.err.equals(that.err))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetErr()) ? 131071 : 524287);
      if (isSetErr())
        hashCode = hashCode * 8191 + err.hashCode();

      return hashCode;
    }

    @Override
    public int compareTo(disconnect_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.valueOf(isSetErr()).compareTo(other.isSetErr());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetErr()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.err, other.err);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    @org.apache.thrift.annotation.Nullable
    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
      }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("disconnect_result(");
      boolean first = true;

      sb.append("err:");
      if (this.err == null) {
        sb.append("null");
      } else {
        sb.append(this.err);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class disconnect_resultStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public disconnect_resultStandardScheme getScheme() {
        return new disconnect_resultStandardScheme();
      }
    }

    private static class disconnect_resultStandardScheme extends org.apache.thrift.scheme.StandardScheme<disconnect_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, disconnect_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // ERR
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.err = new JMXError();
                struct.err.read(iprot);
                struct.setErrIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, disconnect_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.err != null) {
          oprot.writeFieldBegin(ERR_FIELD_DESC);
          struct.err.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class disconnect_resultTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public disconnect_resultTupleScheme getScheme() {
        return new disconnect_resultTupleScheme();
      }
    }

    private static class disconnect_resultTupleScheme extends org.apache.thrift.scheme.TupleScheme<disconnect_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, disconnect_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetErr()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetErr()) {
          struct.err.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, disconnect_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.err = new JMXError();
          struct.err.read(iprot);
          struct.setErrIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class ping_args implements org.apache.thrift.TBase<ping_args, ping_args._Fields>, java.io.Serializable, Cloneable, Comparable<ping_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("ping_args");


    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new ping_argsStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new ping_argsTupleSchemeFactory();


    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
;

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      @org.apache.thrift.annotation.Nullable
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      @org.apache.thrift.annotation.Nullable
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(ping_args.class, metaDataMap);
    }

    public ping_args() {
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public ping_args(ping_args other) {
    }

    public ping_args deepCopy() {
      return new ping_args(this);
    }

    @Override
    public void clear() {
    }

    public void setFieldValue(_Fields field, @org.apache.thrift.annotation.Nullable java.lang.Object value) {
      switch (field) {
      }
    }

    @org.apache.thrift.annotation.Nullable
    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that == null)
        return false;
      if (that instanceof ping_args)
        return this.equals((ping_args)that);
      return false;
    }

    public boolean equals(ping_args that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      return hashCode;
    }

    @Override
    public int compareTo(ping_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      return 0;
    }

    @org.apache.thrift.annotation.Nullable
    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
    }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("ping_args(");
      boolean first = true;

      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class ping_argsStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public ping_argsStandardScheme getScheme() {
        return new ping_argsStandardScheme();
      }
    }

    private static class ping_argsStandardScheme extends org.apache.thrift.scheme.StandardScheme<ping_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, ping_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, ping_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class ping_argsTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public ping_argsTupleScheme getScheme() {
        return new ping_argsTupleScheme();
      }
    }

    private static class ping_argsTupleScheme extends org.apache.thrift.scheme.TupleScheme<ping_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, ping_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, ping_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class ping_result implements org.apache.thrift.TBase<ping_result, ping_result._Fields>, java.io.Serializable, Cloneable, Comparable<ping_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("ping_result");

    private static final org.apache.thrift.protocol.TField ERR_FIELD_DESC = new org.apache.thrift.protocol.TField("err", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new ping_resultStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new ping_resultTupleSchemeFactory();

    public @org.apache.thrift.annotation.Nullable JMXError err; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      ERR((short)1, "err");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      @org.apache.thrift.annotation.Nullable
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // ERR
            return ERR;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      @org.apache.thrift.annotation.Nullable
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.ERR, new org.apache.thrift.meta_data.FieldMetaData("err", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, JMXError.class)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(ping_result.class, metaDataMap);
    }

    public ping_result() {
    }

    public ping_result(
      JMXError err)
    {
      this();
      this.err = err;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public ping_result(ping_result other) {
      if (other.isSetErr()) {
        this.err = new JMXError(other.err);
      }
    }

    public ping_result deepCopy() {
      return new ping_result(this);
    }

    @Override
    public void clear() {
      this.err = null;
    }

    @org.apache.thrift.annotation.Nullable
    public JMXError getErr() {
      return this.err;
    }

    public ping_result setErr(@org.apache.thrift.annotation.Nullable JMXError err) {
      this.err = err;
      return this;
    }

    public void unsetErr() {
      this.err = null;
    }

    /** Returns true if field err is set (has been assigned a value) and false otherwise */
    public boolean isSetErr() {
      return this.err != null;
    }

    public void setErrIsSet(boolean value) {
      if (!value) {
        this.err = null;
      }
    }

    public void setFieldValue(_Fields field, @org.apache.thrift.annotation.Nullable java.lang.Object value) {
      switch (field) {
      case ERR:
        if (value == null) {
          unsetErr();
        } else {
          setErr((JMXError)value);
        }
        break;

      }
    }

    @org.apache.thrift.annotation.Nullable
    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case ERR:
        return getErr();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case ERR:
        return isSetErr();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that == null)
        return false;
      if (that instanceof ping_result)
        return this.equals((ping_result)that);
      return false;
    }

    public boolean equals(ping_result that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_err = true && this.isSetErr();
      boolean that_present_err = true && that.isSetErr();
      if (this_present_err || that_present_err) {
        if (!(this_present_err && that_present_err))
          return false;
        if (!this.err.equals(that.err))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetErr()) ? 131071 : 524287);
      if (isSetErr())
        hashCode = hashCode * 8191 + err.hashCode();

      return hashCode;
    }

    @Override
    public int compareTo(ping_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.valueOf(isSetErr()).compareTo(other.isSetErr());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetErr()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.err, other.err);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    @org.apache.thrift.annotation.Nullable
    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
      }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("ping_result(");
      boolean first = true;

      sb.append("err:");
      if (this.err == null) {
        sb.append("null");
      } else {
        sb.append(this.err);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class ping_resultStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public ping_resultStandardScheme getScheme() {
        return new ping_resultStandardScheme();
      }
    }

    private static class ping_resultStandardScheme extends org.apache.thrift.scheme.StandardScheme<ping_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, ping_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // ERR
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.err = new JMXError();
                struct.err.read(iprot);
                struct.setErrIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, ping_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.err != null) {
          oprot.writeFieldBegin(ERR_FIELD_DESC);
          struct.err.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class ping_resultTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public ping_resultTupleScheme getScheme() {
        return new ping_resultTupleScheme();
      }
    }

    private static class ping_resultTupleScheme extends org.apache.thrift.scheme.TupleScheme<ping_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, ping_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetErr()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetErr()) {
          struct.err.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, ping_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.err = new JMXError();
          struct.err.read(iprot);
          struct.setErrIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class getMBeanNames_args implements org.apache.thrift.TBase<getMBeanNames_args, getMBeanNames_args._Fields>, java.io.Serializable, Cloneable, Comparable<getMBeanNames_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getMBeanNames_args");

    private static final org.apache.thrift.protocol.TField M_BEAN_NAME_PATTERN_FIELD_DESC = new org.apache.thrift.protocol.TField("mBeanNamePattern", org.apache.thrift.protocol.TType.STRING, (short)1);
    private static final org.apache.thrift.protocol.TField TIMEOUT_MS_FIELD_DESC = new org.apache.thrift.protocol.TField("timeoutMs", org.apache.thrift.protocol.TType.I64, (short)2);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new getMBeanNames_argsStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new getMBeanNames_argsTupleSchemeFactory();

    public @org.apache.thrift.annotation.Nullable java.lang.String mBeanNamePattern; // required
    public long timeoutMs; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      M_BEAN_NAME_PATTERN((short)1, "mBeanNamePattern"),
      TIMEOUT_MS((short)2, "timeoutMs");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      @org.apache.thrift.annotation.Nullable
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // M_BEAN_NAME_PATTERN
            return M_BEAN_NAME_PATTERN;
          case 2: // TIMEOUT_MS
            return TIMEOUT_MS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      @org.apache.thrift.annotation.Nullable
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __TIMEOUTMS_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.M_BEAN_NAME_PATTERN, new org.apache.thrift.meta_data.FieldMetaData("mBeanNamePattern", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.TIMEOUT_MS, new org.apache.thrift.meta_data.FieldMetaData("timeoutMs", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getMBeanNames_args.class, metaDataMap);
    }

    public getMBeanNames_args() {
    }

    public getMBeanNames_args(
      java.lang.String mBeanNamePattern,
      long timeoutMs)
    {
      this();
      this.mBeanNamePattern = mBeanNamePattern;
      this.timeoutMs = timeoutMs;
      setTimeoutMsIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getMBeanNames_args(getMBeanNames_args other) {
      __isset_bitfield = other.__isset_bitfield;
      if (other.isSetMBeanNamePattern()) {
        this.mBeanNamePattern = other.mBeanNamePattern;
      }
      this.timeoutMs = other.timeoutMs;
    }

    public getMBeanNames_args deepCopy() {
      return new getMBeanNames_args(this);
    }

    @Override
    public void clear() {
      this.mBeanNamePattern = null;
      setTimeoutMsIsSet(false);
      this.timeoutMs = 0;
    }

    @org.apache.thrift.annotation.Nullable
    public java.lang.String getMBeanNamePattern() {
      return this.mBeanNamePattern;
    }

    public getMBeanNames_args setMBeanNamePattern(@org.apache.thrift.annotation.Nullable java.lang.String mBeanNamePattern) {
      this.mBeanNamePattern = mBeanNamePattern;
      return this;
    }

    public void unsetMBeanNamePattern() {
      this.mBeanNamePattern = null;
    }

    /** Returns true if field mBeanNamePattern is set (has been assigned a value) and false otherwise */
    public boolean isSetMBeanNamePattern() {
      return this.mBeanNamePattern != null;
    }

    public void setMBeanNamePatternIsSet(boolean value) {
      if (!value) {
        this.mBeanNamePattern = null;
      }
    }

    public long getTimeoutMs() {
      return this.timeoutMs;
    }

    public getMBeanNames_args setTimeoutMs(long timeoutMs) {
      this.timeoutMs = timeoutMs;
      setTimeoutMsIsSet(true);
      return this;
    }

    public void unsetTimeoutMs() {
      __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __TIMEOUTMS_ISSET_ID);
    }

    /** Returns true if field timeoutMs is set (has been assigned a value) and false otherwise */
    public boolean isSetTimeoutMs() {
      return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __TIMEOUTMS_ISSET_ID);
    }

    public void setTimeoutMsIsSet(boolean value) {
      __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __TIMEOUTMS_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, @org.apache.thrift.annotation.Nullable java.lang.Object value) {
      switch (field) {
      case M_BEAN_NAME_PATTERN:
        if (value == null) {
          unsetMBeanNamePattern();
        } else {
          setMBeanNamePattern((java.lang.String)value);
        }
        break;

      case TIMEOUT_MS:
        if (value == null) {
          unsetTimeoutMs();
        } else {
          setTimeoutMs((java.lang.Long)value);
        }
        break;

      }
    }

    @org.apache.thrift.annotation.Nullable
    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case M_BEAN_NAME_PATTERN:
        return getMBeanNamePattern();

      case TIMEOUT_MS:
        return getTimeoutMs();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case M_BEAN_NAME_PATTERN:
        return isSetMBeanNamePattern();
      case TIMEOUT_MS:
        return isSetTimeoutMs();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that == null)
        return false;
      if (that instanceof getMBeanNames_args)
        return this.equals((getMBeanNames_args)that);
      return false;
    }

    public boolean equals(getMBeanNames_args that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_mBeanNamePattern = true && this.isSetMBeanNamePattern();
      boolean that_present_mBeanNamePattern = true && that.isSetMBeanNamePattern();
      if (this_present_mBeanNamePattern || that_present_mBeanNamePattern) {
        if (!(this_present_mBeanNamePattern && that_present_mBeanNamePattern))
          return false;
        if (!this.mBeanNamePattern.equals(that.mBeanNamePattern))
          return false;
      }

      boolean this_present_timeoutMs = true;
      boolean that_present_timeoutMs = true;
      if (this_present_timeoutMs || that_present_timeoutMs) {
        if (!(this_present_timeoutMs && that_present_timeoutMs))
          return false;
        if (this.timeoutMs != that.timeoutMs)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetMBeanNamePattern()) ? 131071 : 524287);
      if (isSetMBeanNamePattern())
        hashCode = hashCode * 8191 + mBeanNamePattern.hashCode();

      hashCode = hashCode * 8191 + org.apache.thrift.TBaseHelper.hashCode(timeoutMs);

      return hashCode;
    }

    @Override
    public int compareTo(getMBeanNames_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.valueOf(isSetMBeanNamePattern()).compareTo(other.isSetMBeanNamePattern());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetMBeanNamePattern()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.mBeanNamePattern, other.mBeanNamePattern);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.valueOf(isSetTimeoutMs()).compareTo(other.isSetTimeoutMs());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetTimeoutMs()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.timeoutMs, other.timeoutMs);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    @org.apache.thrift.annotation.Nullable
    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
    }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("getMBeanNames_args(");
      boolean first = true;

      sb.append("mBeanNamePattern:");
      if (this.mBeanNamePattern == null) {
        sb.append("null");
      } else {
        sb.append(this.mBeanNamePattern);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("timeoutMs:");
      sb.append(this.timeoutMs);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getMBeanNames_argsStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public getMBeanNames_argsStandardScheme getScheme() {
        return new getMBeanNames_argsStandardScheme();
      }
    }

    private static class getMBeanNames_argsStandardScheme extends org.apache.thrift.scheme.StandardScheme<getMBeanNames_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getMBeanNames_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // M_BEAN_NAME_PATTERN
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.mBeanNamePattern = iprot.readString();
                struct.setMBeanNamePatternIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // TIMEOUT_MS
              if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
                struct.timeoutMs = iprot.readI64();
                struct.setTimeoutMsIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getMBeanNames_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.mBeanNamePattern != null) {
          oprot.writeFieldBegin(M_BEAN_NAME_PATTERN_FIELD_DESC);
          oprot.writeString(struct.mBeanNamePattern);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldBegin(TIMEOUT_MS_FIELD_DESC);
        oprot.writeI64(struct.timeoutMs);
        oprot.writeFieldEnd();
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getMBeanNames_argsTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public getMBeanNames_argsTupleScheme getScheme() {
        return new getMBeanNames_argsTupleScheme();
      }
    }

    private static class getMBeanNames_argsTupleScheme extends org.apache.thrift.scheme.TupleScheme<getMBeanNames_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getMBeanNames_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetMBeanNamePattern()) {
          optionals.set(0);
        }
        if (struct.isSetTimeoutMs()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetMBeanNamePattern()) {
          oprot.writeString(struct.mBeanNamePattern);
        }
        if (struct.isSetTimeoutMs()) {
          oprot.writeI64(struct.timeoutMs);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getMBeanNames_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.mBeanNamePattern = iprot.readString();
          struct.setMBeanNamePatternIsSet(true);
        }
        if (incoming.get(1)) {
          struct.timeoutMs = iprot.readI64();
          struct.setTimeoutMsIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class getMBeanNames_result implements org.apache.thrift.TBase<getMBeanNames_result, getMBeanNames_result._Fields>, java.io.Serializable, Cloneable, Comparable<getMBeanNames_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getMBeanNames_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.LIST, (short)0);
    private static final org.apache.thrift.protocol.TField CONN_ERR_FIELD_DESC = new org.apache.thrift.protocol.TField("connErr", org.apache.thrift.protocol.TType.STRUCT, (short)1);
    private static final org.apache.thrift.protocol.TField JMX_ERR_FIELD_DESC = new org.apache.thrift.protocol.TField("jmxErr", org.apache.thrift.protocol.TType.STRUCT, (short)2);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new getMBeanNames_resultStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new getMBeanNames_resultTupleSchemeFactory();

    public @org.apache.thrift.annotation.Nullable java.util.List<java.lang.String> success; // required
    public @org.apache.thrift.annotation.Nullable JMXConnectionError connErr; // required
    public @org.apache.thrift.annotation.Nullable JMXError jmxErr; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success"),
      CONN_ERR((short)1, "connErr"),
      JMX_ERR((short)2, "jmxErr");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      @org.apache.thrift.annotation.Nullable
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          case 1: // CONN_ERR
            return CONN_ERR;
          case 2: // JMX_ERR
            return JMX_ERR;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      @org.apache.thrift.annotation.Nullable
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
              new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING))));
      tmpMap.put(_Fields.CONN_ERR, new org.apache.thrift.meta_data.FieldMetaData("connErr", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, JMXConnectionError.class)));
      tmpMap.put(_Fields.JMX_ERR, new org.apache.thrift.meta_data.FieldMetaData("jmxErr", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, JMXError.class)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getMBeanNames_result.class, metaDataMap);
    }

    public getMBeanNames_result() {
    }

    public getMBeanNames_result(
      java.util.List<java.lang.String> success,
      JMXConnectionError connErr,
      JMXError jmxErr)
    {
      this();
      this.success = success;
      this.connErr = connErr;
      this.jmxErr = jmxErr;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getMBeanNames_result(getMBeanNames_result other) {
      if (other.isSetSuccess()) {
        java.util.List<java.lang.String> __this__success = new java.util.ArrayList<java.lang.String>(other.success);
        this.success = __this__success;
      }
      if (other.isSetConnErr()) {
        this.connErr = new JMXConnectionError(other.connErr);
      }
      if (other.isSetJmxErr()) {
        this.jmxErr = new JMXError(other.jmxErr);
      }
    }

    public getMBeanNames_result deepCopy() {
      return new getMBeanNames_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
      this.connErr = null;
      this.jmxErr = null;
    }

    public int getSuccessSize() {
      return (this.success == null) ? 0 : this.success.size();
    }

    @org.apache.thrift.annotation.Nullable
    public java.util.Iterator<java.lang.String> getSuccessIterator() {
      return (this.success == null) ? null : this.success.iterator();
    }

    public void addToSuccess(java.lang.String elem) {
      if (this.success == null) {
        this.success = new java.util.ArrayList<java.lang.String>();
      }
      this.success.add(elem);
    }

    @org.apache.thrift.annotation.Nullable
    public java.util.List<java.lang.String> getSuccess() {
      return this.success;
    }

    public getMBeanNames_result setSuccess(@org.apache.thrift.annotation.Nullable java.util.List<java.lang.String> success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    @org.apache.thrift.annotation.Nullable
    public JMXConnectionError getConnErr() {
      return this.connErr;
    }

    public getMBeanNames_result setConnErr(@org.apache.thrift.annotation.Nullable JMXConnectionError connErr) {
      this.connErr = connErr;
      return this;
    }

    public void unsetConnErr() {
      this.connErr = null;
    }

    /** Returns true if field connErr is set (has been assigned a value) and false otherwise */
    public boolean isSetConnErr() {
      return this.connErr != null;
    }

    public void setConnErrIsSet(boolean value) {
      if (!value) {
        this.connErr = null;
      }
    }

    @org.apache.thrift.annotation.Nullable
    public JMXError getJmxErr() {
      return this.jmxErr;
    }

    public getMBeanNames_result setJmxErr(@org.apache.thrift.annotation.Nullable JMXError jmxErr) {
      this.jmxErr = jmxErr;
      return this;
    }

    public void unsetJmxErr() {
      this.jmxErr = null;
    }

    /** Returns true if field jmxErr is set (has been assigned a value) and false otherwise */
    public boolean isSetJmxErr() {
      return this.jmxErr != null;
    }

    public void setJmxErrIsSet(boolean value) {
      if (!value) {
        this.jmxErr = null;
      }
    }

    public void setFieldValue(_Fields field, @org.apache.thrift.annotation.Nullable java.lang.Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((java.util.List<java.lang.String>)value);
        }
        break;

      case CONN_ERR:
        if (value == null) {
          unsetConnErr();
        } else {
          setConnErr((JMXConnectionError)value);
        }
        break;

      case JMX_ERR:
        if (value == null) {
          unsetJmxErr();
        } else {
          setJmxErr((JMXError)value);
        }
        break;

      }
    }

    @org.apache.thrift.annotation.Nullable
    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      case CONN_ERR:
        return getConnErr();

      case JMX_ERR:
        return getJmxErr();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      case CONN_ERR:
        return isSetConnErr();
      case JMX_ERR:
        return isSetJmxErr();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that == null)
        return false;
      if (that instanceof getMBeanNames_result)
        return this.equals((getMBeanNames_result)that);
      return false;
    }

    public boolean equals(getMBeanNames_result that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      boolean this_present_connErr = true && this.isSetConnErr();
      boolean that_present_connErr = true && that.isSetConnErr();
      if (this_present_connErr || that_present_connErr) {
        if (!(this_present_connErr && that_present_connErr))
          return false;
        if (!this.connErr.equals(that.connErr))
          return false;
      }

      boolean this_present_jmxErr = true && this.isSetJmxErr();
      boolean that_present_jmxErr = true && that.isSetJmxErr();
      if (this_present_jmxErr || that_present_jmxErr) {
        if (!(this_present_jmxErr && that_present_jmxErr))
          return false;
        if (!this.jmxErr.equals(that.jmxErr))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetSuccess()) ? 131071 : 524287);
      if (isSetSuccess())
        hashCode = hashCode * 8191 + success.hashCode();

      hashCode = hashCode * 8191 + ((isSetConnErr()) ? 131071 : 524287);
      if (isSetConnErr())
        hashCode = hashCode * 8191 + connErr.hashCode();

      hashCode = hashCode * 8191 + ((isSetJmxErr()) ? 131071 : 524287);
      if (isSetJmxErr())
        hashCode = hashCode * 8191 + jmxErr.hashCode();

      return hashCode;
    }

    @Override
    public int compareTo(getMBeanNames_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.valueOf(isSetConnErr()).compareTo(other.isSetConnErr());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetConnErr()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.connErr, other.connErr);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.valueOf(isSetJmxErr()).compareTo(other.isSetJmxErr());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetJmxErr()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.jmxErr, other.jmxErr);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    @org.apache.thrift.annotation.Nullable
    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
      }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("getMBeanNames_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("connErr:");
      if (this.connErr == null) {
        sb.append("null");
      } else {
        sb.append(this.connErr);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("jmxErr:");
      if (this.jmxErr == null) {
        sb.append("null");
      } else {
        sb.append(this.jmxErr);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getMBeanNames_resultStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public getMBeanNames_resultStandardScheme getScheme() {
        return new getMBeanNames_resultStandardScheme();
      }
    }

    private static class getMBeanNames_resultStandardScheme extends org.apache.thrift.scheme.StandardScheme<getMBeanNames_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getMBeanNames_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
                {
                  org.apache.thrift.protocol.TList _list0 = iprot.readListBegin();
                  struct.success = new java.util.ArrayList<java.lang.String>(_list0.size);
                  @org.apache.thrift.annotation.Nullable java.lang.String _elem1;
                  for (int _i2 = 0; _i2 < _list0.size; ++_i2)
                  {
                    _elem1 = iprot.readString();
                    struct.success.add(_elem1);
                  }
                  iprot.readListEnd();
                }
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 1: // CONN_ERR
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.connErr = new JMXConnectionError();
                struct.connErr.read(iprot);
                struct.setConnErrIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // JMX_ERR
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.jmxErr = new JMXError();
                struct.jmxErr.read(iprot);
                struct.setJmxErrIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getMBeanNames_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, struct.success.size()));
            for (java.lang.String _iter3 : struct.success)
            {
              oprot.writeString(_iter3);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
        if (struct.connErr != null) {
          oprot.writeFieldBegin(CONN_ERR_FIELD_DESC);
          struct.connErr.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.jmxErr != null) {
          oprot.writeFieldBegin(JMX_ERR_FIELD_DESC);
          struct.jmxErr.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getMBeanNames_resultTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public getMBeanNames_resultTupleScheme getScheme() {
        return new getMBeanNames_resultTupleScheme();
      }
    }

    private static class getMBeanNames_resultTupleScheme extends org.apache.thrift.scheme.TupleScheme<getMBeanNames_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getMBeanNames_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        if (struct.isSetConnErr()) {
          optionals.set(1);
        }
        if (struct.isSetJmxErr()) {
          optionals.set(2);
        }
        oprot.writeBitSet(optionals, 3);
        if (struct.isSetSuccess()) {
          {
            oprot.writeI32(struct.success.size());
            for (java.lang.String _iter4 : struct.success)
            {
              oprot.writeString(_iter4);
            }
          }
        }
        if (struct.isSetConnErr()) {
          struct.connErr.write(oprot);
        }
        if (struct.isSetJmxErr()) {
          struct.jmxErr.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getMBeanNames_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(3);
        if (incoming.get(0)) {
          {
            org.apache.thrift.protocol.TList _list5 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, iprot.readI32());
            struct.success = new java.util.ArrayList<java.lang.String>(_list5.size);
            @org.apache.thrift.annotation.Nullable java.lang.String _elem6;
            for (int _i7 = 0; _i7 < _list5.size; ++_i7)
            {
              _elem6 = iprot.readString();
              struct.success.add(_elem6);
            }
          }
          struct.setSuccessIsSet(true);
        }
        if (incoming.get(1)) {
          struct.connErr = new JMXConnectionError();
          struct.connErr.read(iprot);
          struct.setConnErrIsSet(true);
        }
        if (incoming.get(2)) {
          struct.jmxErr = new JMXError();
          struct.jmxErr.read(iprot);
          struct.setJmxErrIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class getMBeanAttrNames_args implements org.apache.thrift.TBase<getMBeanAttrNames_args, getMBeanAttrNames_args._Fields>, java.io.Serializable, Cloneable, Comparable<getMBeanAttrNames_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getMBeanAttrNames_args");

    private static final org.apache.thrift.protocol.TField M_BEAN_NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("mBeanName", org.apache.thrift.protocol.TType.STRING, (short)1);
    private static final org.apache.thrift.protocol.TField TIMEOUT_MS_FIELD_DESC = new org.apache.thrift.protocol.TField("timeoutMs", org.apache.thrift.protocol.TType.I64, (short)2);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new getMBeanAttrNames_argsStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new getMBeanAttrNames_argsTupleSchemeFactory();

    public @org.apache.thrift.annotation.Nullable java.lang.String mBeanName; // required
    public long timeoutMs; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      M_BEAN_NAME((short)1, "mBeanName"),
      TIMEOUT_MS((short)2, "timeoutMs");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      @org.apache.thrift.annotation.Nullable
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // M_BEAN_NAME
            return M_BEAN_NAME;
          case 2: // TIMEOUT_MS
            return TIMEOUT_MS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      @org.apache.thrift.annotation.Nullable
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __TIMEOUTMS_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.M_BEAN_NAME, new org.apache.thrift.meta_data.FieldMetaData("mBeanName", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.TIMEOUT_MS, new org.apache.thrift.meta_data.FieldMetaData("timeoutMs", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getMBeanAttrNames_args.class, metaDataMap);
    }

    public getMBeanAttrNames_args() {
    }

    public getMBeanAttrNames_args(
      java.lang.String mBeanName,
      long timeoutMs)
    {
      this();
      this.mBeanName = mBeanName;
      this.timeoutMs = timeoutMs;
      setTimeoutMsIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getMBeanAttrNames_args(getMBeanAttrNames_args other) {
      __isset_bitfield = other.__isset_bitfield;
      if (other.isSetMBeanName()) {
        this.mBeanName = other.mBeanName;
      }
      this.timeoutMs = other.timeoutMs;
    }

    public getMBeanAttrNames_args deepCopy() {
      return new getMBeanAttrNames_args(this);
    }

    @Override
    public void clear() {
      this.mBeanName = null;
      setTimeoutMsIsSet(false);
      this.timeoutMs = 0;
    }

    @org.apache.thrift.annotation.Nullable
    public java.lang.String getMBeanName() {
      return this.mBeanName;
    }

    public getMBeanAttrNames_args setMBeanName(@org.apache.thrift.annotation.Nullable java.lang.String mBeanName) {
      this.mBeanName = mBeanName;
      return this;
    }

    public void unsetMBeanName() {
      this.mBeanName = null;
    }

    /** Returns true if field mBeanName is set (has been assigned a value) and false otherwise */
    public boolean isSetMBeanName() {
      return this.mBeanName != null;
    }

    public void setMBeanNameIsSet(boolean value) {
      if (!value) {
        this.mBeanName = null;
      }
    }

    public long getTimeoutMs() {
      return this.timeoutMs;
    }

    public getMBeanAttrNames_args setTimeoutMs(long timeoutMs) {
      this.timeoutMs = timeoutMs;
      setTimeoutMsIsSet(true);
      return this;
    }

    public void unsetTimeoutMs() {
      __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __TIMEOUTMS_ISSET_ID);
    }

    /** Returns true if field timeoutMs is set (has been assigned a value) and false otherwise */
    public boolean isSetTimeoutMs() {
      return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __TIMEOUTMS_ISSET_ID);
    }

    public void setTimeoutMsIsSet(boolean value) {
      __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __TIMEOUTMS_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, @org.apache.thrift.annotation.Nullable java.lang.Object value) {
      switch (field) {
      case M_BEAN_NAME:
        if (value == null) {
          unsetMBeanName();
        } else {
          setMBeanName((java.lang.String)value);
        }
        break;

      case TIMEOUT_MS:
        if (value == null) {
          unsetTimeoutMs();
        } else {
          setTimeoutMs((java.lang.Long)value);
        }
        break;

      }
    }

    @org.apache.thrift.annotation.Nullable
    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case M_BEAN_NAME:
        return getMBeanName();

      case TIMEOUT_MS:
        return getTimeoutMs();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case M_BEAN_NAME:
        return isSetMBeanName();
      case TIMEOUT_MS:
        return isSetTimeoutMs();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that == null)
        return false;
      if (that instanceof getMBeanAttrNames_args)
        return this.equals((getMBeanAttrNames_args)that);
      return false;
    }

    public boolean equals(getMBeanAttrNames_args that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_mBeanName = true && this.isSetMBeanName();
      boolean that_present_mBeanName = true && that.isSetMBeanName();
      if (this_present_mBeanName || that_present_mBeanName) {
        if (!(this_present_mBeanName && that_present_mBeanName))
          return false;
        if (!this.mBeanName.equals(that.mBeanName))
          return false;
      }

      boolean this_present_timeoutMs = true;
      boolean that_present_timeoutMs = true;
      if (this_present_timeoutMs || that_present_timeoutMs) {
        if (!(this_present_timeoutMs && that_present_timeoutMs))
          return false;
        if (this.timeoutMs != that.timeoutMs)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetMBeanName()) ? 131071 : 524287);
      if (isSetMBeanName())
        hashCode = hashCode * 8191 + mBeanName.hashCode();

      hashCode = hashCode * 8191 + org.apache.thrift.TBaseHelper.hashCode(timeoutMs);

      return hashCode;
    }

    @Override
    public int compareTo(getMBeanAttrNames_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.valueOf(isSetMBeanName()).compareTo(other.isSetMBeanName());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetMBeanName()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.mBeanName, other.mBeanName);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.valueOf(isSetTimeoutMs()).compareTo(other.isSetTimeoutMs());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetTimeoutMs()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.timeoutMs, other.timeoutMs);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    @org.apache.thrift.annotation.Nullable
    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
    }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("getMBeanAttrNames_args(");
      boolean first = true;

      sb.append("mBeanName:");
      if (this.mBeanName == null) {
        sb.append("null");
      } else {
        sb.append(this.mBeanName);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("timeoutMs:");
      sb.append(this.timeoutMs);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getMBeanAttrNames_argsStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public getMBeanAttrNames_argsStandardScheme getScheme() {
        return new getMBeanAttrNames_argsStandardScheme();
      }
    }

    private static class getMBeanAttrNames_argsStandardScheme extends org.apache.thrift.scheme.StandardScheme<getMBeanAttrNames_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getMBeanAttrNames_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // M_BEAN_NAME
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.mBeanName = iprot.readString();
                struct.setMBeanNameIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // TIMEOUT_MS
              if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
                struct.timeoutMs = iprot.readI64();
                struct.setTimeoutMsIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getMBeanAttrNames_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.mBeanName != null) {
          oprot.writeFieldBegin(M_BEAN_NAME_FIELD_DESC);
          oprot.writeString(struct.mBeanName);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldBegin(TIMEOUT_MS_FIELD_DESC);
        oprot.writeI64(struct.timeoutMs);
        oprot.writeFieldEnd();
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getMBeanAttrNames_argsTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public getMBeanAttrNames_argsTupleScheme getScheme() {
        return new getMBeanAttrNames_argsTupleScheme();
      }
    }

    private static class getMBeanAttrNames_argsTupleScheme extends org.apache.thrift.scheme.TupleScheme<getMBeanAttrNames_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getMBeanAttrNames_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetMBeanName()) {
          optionals.set(0);
        }
        if (struct.isSetTimeoutMs()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetMBeanName()) {
          oprot.writeString(struct.mBeanName);
        }
        if (struct.isSetTimeoutMs()) {
          oprot.writeI64(struct.timeoutMs);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getMBeanAttrNames_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.mBeanName = iprot.readString();
          struct.setMBeanNameIsSet(true);
        }
        if (incoming.get(1)) {
          struct.timeoutMs = iprot.readI64();
          struct.setTimeoutMsIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class getMBeanAttrNames_result implements org.apache.thrift.TBase<getMBeanAttrNames_result, getMBeanAttrNames_result._Fields>, java.io.Serializable, Cloneable, Comparable<getMBeanAttrNames_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getMBeanAttrNames_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.LIST, (short)0);
    private static final org.apache.thrift.protocol.TField CONN_ERR_FIELD_DESC = new org.apache.thrift.protocol.TField("connErr", org.apache.thrift.protocol.TType.STRUCT, (short)1);
    private static final org.apache.thrift.protocol.TField JMX_ERR_FIELD_DESC = new org.apache.thrift.protocol.TField("jmxErr", org.apache.thrift.protocol.TType.STRUCT, (short)2);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new getMBeanAttrNames_resultStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new getMBeanAttrNames_resultTupleSchemeFactory();

    public @org.apache.thrift.annotation.Nullable java.util.List<java.lang.String> success; // required
    public @org.apache.thrift.annotation.Nullable JMXConnectionError connErr; // required
    public @org.apache.thrift.annotation.Nullable JMXError jmxErr; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success"),
      CONN_ERR((short)1, "connErr"),
      JMX_ERR((short)2, "jmxErr");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      @org.apache.thrift.annotation.Nullable
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          case 1: // CONN_ERR
            return CONN_ERR;
          case 2: // JMX_ERR
            return JMX_ERR;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      @org.apache.thrift.annotation.Nullable
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
              new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING))));
      tmpMap.put(_Fields.CONN_ERR, new org.apache.thrift.meta_data.FieldMetaData("connErr", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, JMXConnectionError.class)));
      tmpMap.put(_Fields.JMX_ERR, new org.apache.thrift.meta_data.FieldMetaData("jmxErr", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, JMXError.class)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getMBeanAttrNames_result.class, metaDataMap);
    }

    public getMBeanAttrNames_result() {
    }

    public getMBeanAttrNames_result(
      java.util.List<java.lang.String> success,
      JMXConnectionError connErr,
      JMXError jmxErr)
    {
      this();
      this.success = success;
      this.connErr = connErr;
      this.jmxErr = jmxErr;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getMBeanAttrNames_result(getMBeanAttrNames_result other) {
      if (other.isSetSuccess()) {
        java.util.List<java.lang.String> __this__success = new java.util.ArrayList<java.lang.String>(other.success);
        this.success = __this__success;
      }
      if (other.isSetConnErr()) {
        this.connErr = new JMXConnectionError(other.connErr);
      }
      if (other.isSetJmxErr()) {
        this.jmxErr = new JMXError(other.jmxErr);
      }
    }

    public getMBeanAttrNames_result deepCopy() {
      return new getMBeanAttrNames_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
      this.connErr = null;
      this.jmxErr = null;
    }

    public int getSuccessSize() {
      return (this.success == null) ? 0 : this.success.size();
    }

    @org.apache.thrift.annotation.Nullable
    public java.util.Iterator<java.lang.String> getSuccessIterator() {
      return (this.success == null) ? null : this.success.iterator();
    }

    public void addToSuccess(java.lang.String elem) {
      if (this.success == null) {
        this.success = new java.util.ArrayList<java.lang.String>();
      }
      this.success.add(elem);
    }

    @org.apache.thrift.annotation.Nullable
    public java.util.List<java.lang.String> getSuccess() {
      return this.success;
    }

    public getMBeanAttrNames_result setSuccess(@org.apache.thrift.annotation.Nullable java.util.List<java.lang.String> success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    @org.apache.thrift.annotation.Nullable
    public JMXConnectionError getConnErr() {
      return this.connErr;
    }

    public getMBeanAttrNames_result setConnErr(@org.apache.thrift.annotation.Nullable JMXConnectionError connErr) {
      this.connErr = connErr;
      return this;
    }

    public void unsetConnErr() {
      this.connErr = null;
    }

    /** Returns true if field connErr is set (has been assigned a value) and false otherwise */
    public boolean isSetConnErr() {
      return this.connErr != null;
    }

    public void setConnErrIsSet(boolean value) {
      if (!value) {
        this.connErr = null;
      }
    }

    @org.apache.thrift.annotation.Nullable
    public JMXError getJmxErr() {
      return this.jmxErr;
    }

    public getMBeanAttrNames_result setJmxErr(@org.apache.thrift.annotation.Nullable JMXError jmxErr) {
      this.jmxErr = jmxErr;
      return this;
    }

    public void unsetJmxErr() {
      this.jmxErr = null;
    }

    /** Returns true if field jmxErr is set (has been assigned a value) and false otherwise */
    public boolean isSetJmxErr() {
      return this.jmxErr != null;
    }

    public void setJmxErrIsSet(boolean value) {
      if (!value) {
        this.jmxErr = null;
      }
    }

    public void setFieldValue(_Fields field, @org.apache.thrift.annotation.Nullable java.lang.Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((java.util.List<java.lang.String>)value);
        }
        break;

      case CONN_ERR:
        if (value == null) {
          unsetConnErr();
        } else {
          setConnErr((JMXConnectionError)value);
        }
        break;

      case JMX_ERR:
        if (value == null) {
          unsetJmxErr();
        } else {
          setJmxErr((JMXError)value);
        }
        break;

      }
    }

    @org.apache.thrift.annotation.Nullable
    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      case CONN_ERR:
        return getConnErr();

      case JMX_ERR:
        return getJmxErr();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      case CONN_ERR:
        return isSetConnErr();
      case JMX_ERR:
        return isSetJmxErr();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that == null)
        return false;
      if (that instanceof getMBeanAttrNames_result)
        return this.equals((getMBeanAttrNames_result)that);
      return false;
    }

    public boolean equals(getMBeanAttrNames_result that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      boolean this_present_connErr = true && this.isSetConnErr();
      boolean that_present_connErr = true && that.isSetConnErr();
      if (this_present_connErr || that_present_connErr) {
        if (!(this_present_connErr && that_present_connErr))
          return false;
        if (!this.connErr.equals(that.connErr))
          return false;
      }

      boolean this_present_jmxErr = true && this.isSetJmxErr();
      boolean that_present_jmxErr = true && that.isSetJmxErr();
      if (this_present_jmxErr || that_present_jmxErr) {
        if (!(this_present_jmxErr && that_present_jmxErr))
          return false;
        if (!this.jmxErr.equals(that.jmxErr))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetSuccess()) ? 131071 : 524287);
      if (isSetSuccess())
        hashCode = hashCode * 8191 + success.hashCode();

      hashCode = hashCode * 8191 + ((isSetConnErr()) ? 131071 : 524287);
      if (isSetConnErr())
        hashCode = hashCode * 8191 + connErr.hashCode();

      hashCode = hashCode * 8191 + ((isSetJmxErr()) ? 131071 : 524287);
      if (isSetJmxErr())
        hashCode = hashCode * 8191 + jmxErr.hashCode();

      return hashCode;
    }

    @Override
    public int compareTo(getMBeanAttrNames_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.valueOf(isSetConnErr()).compareTo(other.isSetConnErr());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetConnErr()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.connErr, other.connErr);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.valueOf(isSetJmxErr()).compareTo(other.isSetJmxErr());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetJmxErr()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.jmxErr, other.jmxErr);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    @org.apache.thrift.annotation.Nullable
    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
      }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("getMBeanAttrNames_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("connErr:");
      if (this.connErr == null) {
        sb.append("null");
      } else {
        sb.append(this.connErr);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("jmxErr:");
      if (this.jmxErr == null) {
        sb.append("null");
      } else {
        sb.append(this.jmxErr);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getMBeanAttrNames_resultStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public getMBeanAttrNames_resultStandardScheme getScheme() {
        return new getMBeanAttrNames_resultStandardScheme();
      }
    }

    private static class getMBeanAttrNames_resultStandardScheme extends org.apache.thrift.scheme.StandardScheme<getMBeanAttrNames_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getMBeanAttrNames_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
                {
                  org.apache.thrift.protocol.TList _list8 = iprot.readListBegin();
                  struct.success = new java.util.ArrayList<java.lang.String>(_list8.size);
                  @org.apache.thrift.annotation.Nullable java.lang.String _elem9;
                  for (int _i10 = 0; _i10 < _list8.size; ++_i10)
                  {
                    _elem9 = iprot.readString();
                    struct.success.add(_elem9);
                  }
                  iprot.readListEnd();
                }
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 1: // CONN_ERR
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.connErr = new JMXConnectionError();
                struct.connErr.read(iprot);
                struct.setConnErrIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // JMX_ERR
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.jmxErr = new JMXError();
                struct.jmxErr.read(iprot);
                struct.setJmxErrIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getMBeanAttrNames_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, struct.success.size()));
            for (java.lang.String _iter11 : struct.success)
            {
              oprot.writeString(_iter11);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
        if (struct.connErr != null) {
          oprot.writeFieldBegin(CONN_ERR_FIELD_DESC);
          struct.connErr.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.jmxErr != null) {
          oprot.writeFieldBegin(JMX_ERR_FIELD_DESC);
          struct.jmxErr.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getMBeanAttrNames_resultTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public getMBeanAttrNames_resultTupleScheme getScheme() {
        return new getMBeanAttrNames_resultTupleScheme();
      }
    }

    private static class getMBeanAttrNames_resultTupleScheme extends org.apache.thrift.scheme.TupleScheme<getMBeanAttrNames_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getMBeanAttrNames_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        if (struct.isSetConnErr()) {
          optionals.set(1);
        }
        if (struct.isSetJmxErr()) {
          optionals.set(2);
        }
        oprot.writeBitSet(optionals, 3);
        if (struct.isSetSuccess()) {
          {
            oprot.writeI32(struct.success.size());
            for (java.lang.String _iter12 : struct.success)
            {
              oprot.writeString(_iter12);
            }
          }
        }
        if (struct.isSetConnErr()) {
          struct.connErr.write(oprot);
        }
        if (struct.isSetJmxErr()) {
          struct.jmxErr.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getMBeanAttrNames_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(3);
        if (incoming.get(0)) {
          {
            org.apache.thrift.protocol.TList _list13 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, iprot.readI32());
            struct.success = new java.util.ArrayList<java.lang.String>(_list13.size);
            @org.apache.thrift.annotation.Nullable java.lang.String _elem14;
            for (int _i15 = 0; _i15 < _list13.size; ++_i15)
            {
              _elem14 = iprot.readString();
              struct.success.add(_elem14);
            }
          }
          struct.setSuccessIsSet(true);
        }
        if (incoming.get(1)) {
          struct.connErr = new JMXConnectionError();
          struct.connErr.read(iprot);
          struct.setConnErrIsSet(true);
        }
        if (incoming.get(2)) {
          struct.jmxErr = new JMXError();
          struct.jmxErr.read(iprot);
          struct.setJmxErrIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class getMBeanAttr_args implements org.apache.thrift.TBase<getMBeanAttr_args, getMBeanAttr_args._Fields>, java.io.Serializable, Cloneable, Comparable<getMBeanAttr_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getMBeanAttr_args");

    private static final org.apache.thrift.protocol.TField M_BEAN_NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("mBeanName", org.apache.thrift.protocol.TType.STRING, (short)1);
    private static final org.apache.thrift.protocol.TField ATTR_NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("attrName", org.apache.thrift.protocol.TType.STRING, (short)2);
    private static final org.apache.thrift.protocol.TField TIMEOUT_MS_FIELD_DESC = new org.apache.thrift.protocol.TField("timeoutMs", org.apache.thrift.protocol.TType.I64, (short)3);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new getMBeanAttr_argsStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new getMBeanAttr_argsTupleSchemeFactory();

    public @org.apache.thrift.annotation.Nullable java.lang.String mBeanName; // required
    public @org.apache.thrift.annotation.Nullable java.lang.String attrName; // required
    public long timeoutMs; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      M_BEAN_NAME((short)1, "mBeanName"),
      ATTR_NAME((short)2, "attrName"),
      TIMEOUT_MS((short)3, "timeoutMs");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      @org.apache.thrift.annotation.Nullable
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // M_BEAN_NAME
            return M_BEAN_NAME;
          case 2: // ATTR_NAME
            return ATTR_NAME;
          case 3: // TIMEOUT_MS
            return TIMEOUT_MS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      @org.apache.thrift.annotation.Nullable
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __TIMEOUTMS_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.M_BEAN_NAME, new org.apache.thrift.meta_data.FieldMetaData("mBeanName", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.ATTR_NAME, new org.apache.thrift.meta_data.FieldMetaData("attrName", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.TIMEOUT_MS, new org.apache.thrift.meta_data.FieldMetaData("timeoutMs", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getMBeanAttr_args.class, metaDataMap);
    }

    public getMBeanAttr_args() {
    }

    public getMBeanAttr_args(
      java.lang.String mBeanName,
      java.lang.String attrName,
      long timeoutMs)
    {
      this();
      this.mBeanName = mBeanName;
      this.attrName = attrName;
      this.timeoutMs = timeoutMs;
      setTimeoutMsIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getMBeanAttr_args(getMBeanAttr_args other) {
      __isset_bitfield = other.__isset_bitfield;
      if (other.isSetMBeanName()) {
        this.mBeanName = other.mBeanName;
      }
      if (other.isSetAttrName()) {
        this.attrName = other.attrName;
      }
      this.timeoutMs = other.timeoutMs;
    }

    public getMBeanAttr_args deepCopy() {
      return new getMBeanAttr_args(this);
    }

    @Override
    public void clear() {
      this.mBeanName = null;
      this.attrName = null;
      setTimeoutMsIsSet(false);
      this.timeoutMs = 0;
    }

    @org.apache.thrift.annotation.Nullable
    public java.lang.String getMBeanName() {
      return this.mBeanName;
    }

    public getMBeanAttr_args setMBeanName(@org.apache.thrift.annotation.Nullable java.lang.String mBeanName) {
      this.mBeanName = mBeanName;
      return this;
    }

    public void unsetMBeanName() {
      this.mBeanName = null;
    }

    /** Returns true if field mBeanName is set (has been assigned a value) and false otherwise */
    public boolean isSetMBeanName() {
      return this.mBeanName != null;
    }

    public void setMBeanNameIsSet(boolean value) {
      if (!value) {
        this.mBeanName = null;
      }
    }

    @org.apache.thrift.annotation.Nullable
    public java.lang.String getAttrName() {
      return this.attrName;
    }

    public getMBeanAttr_args setAttrName(@org.apache.thrift.annotation.Nullable java.lang.String attrName) {
      this.attrName = attrName;
      return this;
    }

    public void unsetAttrName() {
      this.attrName = null;
    }

    /** Returns true if field attrName is set (has been assigned a value) and false otherwise */
    public boolean isSetAttrName() {
      return this.attrName != null;
    }

    public void setAttrNameIsSet(boolean value) {
      if (!value) {
        this.attrName = null;
      }
    }

    public long getTimeoutMs() {
      return this.timeoutMs;
    }

    public getMBeanAttr_args setTimeoutMs(long timeoutMs) {
      this.timeoutMs = timeoutMs;
      setTimeoutMsIsSet(true);
      return this;
    }

    public void unsetTimeoutMs() {
      __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __TIMEOUTMS_ISSET_ID);
    }

    /** Returns true if field timeoutMs is set (has been assigned a value) and false otherwise */
    public boolean isSetTimeoutMs() {
      return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __TIMEOUTMS_ISSET_ID);
    }

    public void setTimeoutMsIsSet(boolean value) {
      __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __TIMEOUTMS_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, @org.apache.thrift.annotation.Nullable java.lang.Object value) {
      switch (field) {
      case M_BEAN_NAME:
        if (value == null) {
          unsetMBeanName();
        } else {
          setMBeanName((java.lang.String)value);
        }
        break;

      case ATTR_NAME:
        if (value == null) {
          unsetAttrName();
        } else {
          setAttrName((java.lang.String)value);
        }
        break;

      case TIMEOUT_MS:
        if (value == null) {
          unsetTimeoutMs();
        } else {
          setTimeoutMs((java.lang.Long)value);
        }
        break;

      }
    }

    @org.apache.thrift.annotation.Nullable
    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case M_BEAN_NAME:
        return getMBeanName();

      case ATTR_NAME:
        return getAttrName();

      case TIMEOUT_MS:
        return getTimeoutMs();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case M_BEAN_NAME:
        return isSetMBeanName();
      case ATTR_NAME:
        return isSetAttrName();
      case TIMEOUT_MS:
        return isSetTimeoutMs();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that == null)
        return false;
      if (that instanceof getMBeanAttr_args)
        return this.equals((getMBeanAttr_args)that);
      return false;
    }

    public boolean equals(getMBeanAttr_args that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_mBeanName = true && this.isSetMBeanName();
      boolean that_present_mBeanName = true && that.isSetMBeanName();
      if (this_present_mBeanName || that_present_mBeanName) {
        if (!(this_present_mBeanName && that_present_mBeanName))
          return false;
        if (!this.mBeanName.equals(that.mBeanName))
          return false;
      }

      boolean this_present_attrName = true && this.isSetAttrName();
      boolean that_present_attrName = true && that.isSetAttrName();
      if (this_present_attrName || that_present_attrName) {
        if (!(this_present_attrName && that_present_attrName))
          return false;
        if (!this.attrName.equals(that.attrName))
          return false;
      }

      boolean this_present_timeoutMs = true;
      boolean that_present_timeoutMs = true;
      if (this_present_timeoutMs || that_present_timeoutMs) {
        if (!(this_present_timeoutMs && that_present_timeoutMs))
          return false;
        if (this.timeoutMs != that.timeoutMs)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetMBeanName()) ? 131071 : 524287);
      if (isSetMBeanName())
        hashCode = hashCode * 8191 + mBeanName.hashCode();

      hashCode = hashCode * 8191 + ((isSetAttrName()) ? 131071 : 524287);
      if (isSetAttrName())
        hashCode = hashCode * 8191 + attrName.hashCode();

      hashCode = hashCode * 8191 + org.apache.thrift.TBaseHelper.hashCode(timeoutMs);

      return hashCode;
    }

    @Override
    public int compareTo(getMBeanAttr_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.valueOf(isSetMBeanName()).compareTo(other.isSetMBeanName());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetMBeanName()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.mBeanName, other.mBeanName);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.valueOf(isSetAttrName()).compareTo(other.isSetAttrName());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetAttrName()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.attrName, other.attrName);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.valueOf(isSetTimeoutMs()).compareTo(other.isSetTimeoutMs());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetTimeoutMs()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.timeoutMs, other.timeoutMs);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    @org.apache.thrift.annotation.Nullable
    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
    }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("getMBeanAttr_args(");
      boolean first = true;

      sb.append("mBeanName:");
      if (this.mBeanName == null) {
        sb.append("null");
      } else {
        sb.append(this.mBeanName);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("attrName:");
      if (this.attrName == null) {
        sb.append("null");
      } else {
        sb.append(this.attrName);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("timeoutMs:");
      sb.append(this.timeoutMs);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getMBeanAttr_argsStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public getMBeanAttr_argsStandardScheme getScheme() {
        return new getMBeanAttr_argsStandardScheme();
      }
    }

    private static class getMBeanAttr_argsStandardScheme extends org.apache.thrift.scheme.StandardScheme<getMBeanAttr_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getMBeanAttr_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // M_BEAN_NAME
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.mBeanName = iprot.readString();
                struct.setMBeanNameIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // ATTR_NAME
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.attrName = iprot.readString();
                struct.setAttrNameIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 3: // TIMEOUT_MS
              if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
                struct.timeoutMs = iprot.readI64();
                struct.setTimeoutMsIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getMBeanAttr_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.mBeanName != null) {
          oprot.writeFieldBegin(M_BEAN_NAME_FIELD_DESC);
          oprot.writeString(struct.mBeanName);
          oprot.writeFieldEnd();
        }
        if (struct.attrName != null) {
          oprot.writeFieldBegin(ATTR_NAME_FIELD_DESC);
          oprot.writeString(struct.attrName);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldBegin(TIMEOUT_MS_FIELD_DESC);
        oprot.writeI64(struct.timeoutMs);
        oprot.writeFieldEnd();
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getMBeanAttr_argsTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public getMBeanAttr_argsTupleScheme getScheme() {
        return new getMBeanAttr_argsTupleScheme();
      }
    }

    private static class getMBeanAttr_argsTupleScheme extends org.apache.thrift.scheme.TupleScheme<getMBeanAttr_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getMBeanAttr_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetMBeanName()) {
          optionals.set(0);
        }
        if (struct.isSetAttrName()) {
          optionals.set(1);
        }
        if (struct.isSetTimeoutMs()) {
          optionals.set(2);
        }
        oprot.writeBitSet(optionals, 3);
        if (struct.isSetMBeanName()) {
          oprot.writeString(struct.mBeanName);
        }
        if (struct.isSetAttrName()) {
          oprot.writeString(struct.attrName);
        }
        if (struct.isSetTimeoutMs()) {
          oprot.writeI64(struct.timeoutMs);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getMBeanAttr_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(3);
        if (incoming.get(0)) {
          struct.mBeanName = iprot.readString();
          struct.setMBeanNameIsSet(true);
        }
        if (incoming.get(1)) {
          struct.attrName = iprot.readString();
          struct.setAttrNameIsSet(true);
        }
        if (incoming.get(2)) {
          struct.timeoutMs = iprot.readI64();
          struct.setTimeoutMsIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class getMBeanAttr_result implements org.apache.thrift.TBase<getMBeanAttr_result, getMBeanAttr_result._Fields>, java.io.Serializable, Cloneable, Comparable<getMBeanAttr_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getMBeanAttr_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);
    private static final org.apache.thrift.protocol.TField CONN_ERR_FIELD_DESC = new org.apache.thrift.protocol.TField("connErr", org.apache.thrift.protocol.TType.STRUCT, (short)1);
    private static final org.apache.thrift.protocol.TField JMX_ERR_FIELD_DESC = new org.apache.thrift.protocol.TField("jmxErr", org.apache.thrift.protocol.TType.STRUCT, (short)2);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new getMBeanAttr_resultStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new getMBeanAttr_resultTupleSchemeFactory();

    public @org.apache.thrift.annotation.Nullable JMXAttribute success; // required
    public @org.apache.thrift.annotation.Nullable JMXConnectionError connErr; // required
    public @org.apache.thrift.annotation.Nullable JMXError jmxErr; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success"),
      CONN_ERR((short)1, "connErr"),
      JMX_ERR((short)2, "jmxErr");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      @org.apache.thrift.annotation.Nullable
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          case 1: // CONN_ERR
            return CONN_ERR;
          case 2: // JMX_ERR
            return JMX_ERR;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      @org.apache.thrift.annotation.Nullable
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, JMXAttribute.class)));
      tmpMap.put(_Fields.CONN_ERR, new org.apache.thrift.meta_data.FieldMetaData("connErr", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, JMXConnectionError.class)));
      tmpMap.put(_Fields.JMX_ERR, new org.apache.thrift.meta_data.FieldMetaData("jmxErr", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, JMXError.class)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getMBeanAttr_result.class, metaDataMap);
    }

    public getMBeanAttr_result() {
    }

    public getMBeanAttr_result(
      JMXAttribute success,
      JMXConnectionError connErr,
      JMXError jmxErr)
    {
      this();
      this.success = success;
      this.connErr = connErr;
      this.jmxErr = jmxErr;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getMBeanAttr_result(getMBeanAttr_result other) {
      if (other.isSetSuccess()) {
        this.success = new JMXAttribute(other.success);
      }
      if (other.isSetConnErr()) {
        this.connErr = new JMXConnectionError(other.connErr);
      }
      if (other.isSetJmxErr()) {
        this.jmxErr = new JMXError(other.jmxErr);
      }
    }

    public getMBeanAttr_result deepCopy() {
      return new getMBeanAttr_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
      this.connErr = null;
      this.jmxErr = null;
    }

    @org.apache.thrift.annotation.Nullable
    public JMXAttribute getSuccess() {
      return this.success;
    }

    public getMBeanAttr_result setSuccess(@org.apache.thrift.annotation.Nullable JMXAttribute success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    @org.apache.thrift.annotation.Nullable
    public JMXConnectionError getConnErr() {
      return this.connErr;
    }

    public getMBeanAttr_result setConnErr(@org.apache.thrift.annotation.Nullable JMXConnectionError connErr) {
      this.connErr = connErr;
      return this;
    }

    public void unsetConnErr() {
      this.connErr = null;
    }

    /** Returns true if field connErr is set (has been assigned a value) and false otherwise */
    public boolean isSetConnErr() {
      return this.connErr != null;
    }

    public void setConnErrIsSet(boolean value) {
      if (!value) {
        this.connErr = null;
      }
    }

    @org.apache.thrift.annotation.Nullable
    public JMXError getJmxErr() {
      return this.jmxErr;
    }

    public getMBeanAttr_result setJmxErr(@org.apache.thrift.annotation.Nullable JMXError jmxErr) {
      this.jmxErr = jmxErr;
      return this;
    }

    public void unsetJmxErr() {
      this.jmxErr = null;
    }

    /** Returns true if field jmxErr is set (has been assigned a value) and false otherwise */
    public boolean isSetJmxErr() {
      return this.jmxErr != null;
    }

    public void setJmxErrIsSet(boolean value) {
      if (!value) {
        this.jmxErr = null;
      }
    }

    public void setFieldValue(_Fields field, @org.apache.thrift.annotation.Nullable java.lang.Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((JMXAttribute)value);
        }
        break;

      case CONN_ERR:
        if (value == null) {
          unsetConnErr();
        } else {
          setConnErr((JMXConnectionError)value);
        }
        break;

      case JMX_ERR:
        if (value == null) {
          unsetJmxErr();
        } else {
          setJmxErr((JMXError)value);
        }
        break;

      }
    }

    @org.apache.thrift.annotation.Nullable
    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      case CONN_ERR:
        return getConnErr();

      case JMX_ERR:
        return getJmxErr();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      case CONN_ERR:
        return isSetConnErr();
      case JMX_ERR:
        return isSetJmxErr();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that == null)
        return false;
      if (that instanceof getMBeanAttr_result)
        return this.equals((getMBeanAttr_result)that);
      return false;
    }

    public boolean equals(getMBeanAttr_result that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      boolean this_present_connErr = true && this.isSetConnErr();
      boolean that_present_connErr = true && that.isSetConnErr();
      if (this_present_connErr || that_present_connErr) {
        if (!(this_present_connErr && that_present_connErr))
          return false;
        if (!this.connErr.equals(that.connErr))
          return false;
      }

      boolean this_present_jmxErr = true && this.isSetJmxErr();
      boolean that_present_jmxErr = true && that.isSetJmxErr();
      if (this_present_jmxErr || that_present_jmxErr) {
        if (!(this_present_jmxErr && that_present_jmxErr))
          return false;
        if (!this.jmxErr.equals(that.jmxErr))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetSuccess()) ? 131071 : 524287);
      if (isSetSuccess())
        hashCode = hashCode * 8191 + success.hashCode();

      hashCode = hashCode * 8191 + ((isSetConnErr()) ? 131071 : 524287);
      if (isSetConnErr())
        hashCode = hashCode * 8191 + connErr.hashCode();

      hashCode = hashCode * 8191 + ((isSetJmxErr()) ? 131071 : 524287);
      if (isSetJmxErr())
        hashCode = hashCode * 8191 + jmxErr.hashCode();

      return hashCode;
    }

    @Override
    public int compareTo(getMBeanAttr_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.valueOf(isSetConnErr()).compareTo(other.isSetConnErr());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetConnErr()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.connErr, other.connErr);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.valueOf(isSetJmxErr()).compareTo(other.isSetJmxErr());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetJmxErr()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.jmxErr, other.jmxErr);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    @org.apache.thrift.annotation.Nullable
    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
      }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("getMBeanAttr_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("connErr:");
      if (this.connErr == null) {
        sb.append("null");
      } else {
        sb.append(this.connErr);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("jmxErr:");
      if (this.jmxErr == null) {
        sb.append("null");
      } else {
        sb.append(this.jmxErr);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (success != null) {
        success.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getMBeanAttr_resultStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public getMBeanAttr_resultStandardScheme getScheme() {
        return new getMBeanAttr_resultStandardScheme();
      }
    }

    private static class getMBeanAttr_resultStandardScheme extends org.apache.thrift.scheme.StandardScheme<getMBeanAttr_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getMBeanAttr_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.success = new JMXAttribute();
                struct.success.read(iprot);
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 1: // CONN_ERR
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.connErr = new JMXConnectionError();
                struct.connErr.read(iprot);
                struct.setConnErrIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // JMX_ERR
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.jmxErr = new JMXError();
                struct.jmxErr.read(iprot);
                struct.setJmxErrIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getMBeanAttr_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          struct.success.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.connErr != null) {
          oprot.writeFieldBegin(CONN_ERR_FIELD_DESC);
          struct.connErr.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.jmxErr != null) {
          oprot.writeFieldBegin(JMX_ERR_FIELD_DESC);
          struct.jmxErr.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getMBeanAttr_resultTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public getMBeanAttr_resultTupleScheme getScheme() {
        return new getMBeanAttr_resultTupleScheme();
      }
    }

    private static class getMBeanAttr_resultTupleScheme extends org.apache.thrift.scheme.TupleScheme<getMBeanAttr_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getMBeanAttr_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        if (struct.isSetConnErr()) {
          optionals.set(1);
        }
        if (struct.isSetJmxErr()) {
          optionals.set(2);
        }
        oprot.writeBitSet(optionals, 3);
        if (struct.isSetSuccess()) {
          struct.success.write(oprot);
        }
        if (struct.isSetConnErr()) {
          struct.connErr.write(oprot);
        }
        if (struct.isSetJmxErr()) {
          struct.jmxErr.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getMBeanAttr_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(3);
        if (incoming.get(0)) {
          struct.success = new JMXAttribute();
          struct.success.read(iprot);
          struct.setSuccessIsSet(true);
        }
        if (incoming.get(1)) {
          struct.connErr = new JMXConnectionError();
          struct.connErr.read(iprot);
          struct.setConnErrIsSet(true);
        }
        if (incoming.get(2)) {
          struct.jmxErr = new JMXError();
          struct.jmxErr.read(iprot);
          struct.setJmxErrIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

}
