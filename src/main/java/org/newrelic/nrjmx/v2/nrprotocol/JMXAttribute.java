/**
 * Autogenerated by Thrift Compiler (0.15.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package org.newrelic.nrjmx.v2.nrprotocol;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked", "unused"})
@javax.annotation.Generated(value = "Autogenerated by Thrift Compiler (0.15.0)", date = "2021-11-21")
public class JMXAttribute implements org.apache.thrift.TBase<JMXAttribute, JMXAttribute._Fields>, java.io.Serializable, Cloneable, Comparable<JMXAttribute> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("JMXAttribute");

  private static final org.apache.thrift.protocol.TField ATTRIBUTE_FIELD_DESC = new org.apache.thrift.protocol.TField("attribute", org.apache.thrift.protocol.TType.STRING, (short)1);
  private static final org.apache.thrift.protocol.TField VALUE_TYPE_FIELD_DESC = new org.apache.thrift.protocol.TField("valueType", org.apache.thrift.protocol.TType.I32, (short)2);
  private static final org.apache.thrift.protocol.TField STRING_VALUE_FIELD_DESC = new org.apache.thrift.protocol.TField("stringValue", org.apache.thrift.protocol.TType.STRING, (short)3);
  private static final org.apache.thrift.protocol.TField DOUBLE_VALUE_FIELD_DESC = new org.apache.thrift.protocol.TField("doubleValue", org.apache.thrift.protocol.TType.DOUBLE, (short)4);
  private static final org.apache.thrift.protocol.TField INT_VALUE_FIELD_DESC = new org.apache.thrift.protocol.TField("intValue", org.apache.thrift.protocol.TType.I64, (short)5);
  private static final org.apache.thrift.protocol.TField BOOL_VALUE_FIELD_DESC = new org.apache.thrift.protocol.TField("boolValue", org.apache.thrift.protocol.TType.BOOL, (short)6);

  private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new JMXAttributeStandardSchemeFactory();
  private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new JMXAttributeTupleSchemeFactory();

  public @org.apache.thrift.annotation.Nullable java.lang.String attribute; // required
  /**
   * 
   * @see ValueType
   */
  public @org.apache.thrift.annotation.Nullable ValueType valueType; // required
  public @org.apache.thrift.annotation.Nullable java.lang.String stringValue; // required
  public double doubleValue; // required
  public long intValue; // required
  public boolean boolValue; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    ATTRIBUTE((short)1, "attribute"),
    /**
     * 
     * @see ValueType
     */
    VALUE_TYPE((short)2, "valueType"),
    STRING_VALUE((short)3, "stringValue"),
    DOUBLE_VALUE((short)4, "doubleValue"),
    INT_VALUE((short)5, "intValue"),
    BOOL_VALUE((short)6, "boolValue");

    private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

    static {
      for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    @org.apache.thrift.annotation.Nullable
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // ATTRIBUTE
          return ATTRIBUTE;
        case 2: // VALUE_TYPE
          return VALUE_TYPE;
        case 3: // STRING_VALUE
          return STRING_VALUE;
        case 4: // DOUBLE_VALUE
          return DOUBLE_VALUE;
        case 5: // INT_VALUE
          return INT_VALUE;
        case 6: // BOOL_VALUE
          return BOOL_VALUE;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    @org.apache.thrift.annotation.Nullable
    public static _Fields findByName(java.lang.String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final java.lang.String _fieldName;

    _Fields(short thriftId, java.lang.String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public java.lang.String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __DOUBLEVALUE_ISSET_ID = 0;
  private static final int __INTVALUE_ISSET_ID = 1;
  private static final int __BOOLVALUE_ISSET_ID = 2;
  private byte __isset_bitfield = 0;
  public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.ATTRIBUTE, new org.apache.thrift.meta_data.FieldMetaData("attribute", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.VALUE_TYPE, new org.apache.thrift.meta_data.FieldMetaData("valueType", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.EnumMetaData(org.apache.thrift.protocol.TType.ENUM, ValueType.class)));
    tmpMap.put(_Fields.STRING_VALUE, new org.apache.thrift.meta_data.FieldMetaData("stringValue", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.DOUBLE_VALUE, new org.apache.thrift.meta_data.FieldMetaData("doubleValue", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
    tmpMap.put(_Fields.INT_VALUE, new org.apache.thrift.meta_data.FieldMetaData("intValue", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.BOOL_VALUE, new org.apache.thrift.meta_data.FieldMetaData("boolValue", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
    metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(JMXAttribute.class, metaDataMap);
  }

  public JMXAttribute() {
  }

  public JMXAttribute(
    java.lang.String attribute,
    ValueType valueType,
    java.lang.String stringValue,
    double doubleValue,
    long intValue,
    boolean boolValue)
  {
    this();
    this.attribute = attribute;
    this.valueType = valueType;
    this.stringValue = stringValue;
    this.doubleValue = doubleValue;
    setDoubleValueIsSet(true);
    this.intValue = intValue;
    setIntValueIsSet(true);
    this.boolValue = boolValue;
    setBoolValueIsSet(true);
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public JMXAttribute(JMXAttribute other) {
    __isset_bitfield = other.__isset_bitfield;
    if (other.isSetAttribute()) {
      this.attribute = other.attribute;
    }
    if (other.isSetValueType()) {
      this.valueType = other.valueType;
    }
    if (other.isSetStringValue()) {
      this.stringValue = other.stringValue;
    }
    this.doubleValue = other.doubleValue;
    this.intValue = other.intValue;
    this.boolValue = other.boolValue;
  }

  public JMXAttribute deepCopy() {
    return new JMXAttribute(this);
  }

  @Override
  public void clear() {
    this.attribute = null;
    this.valueType = null;
    this.stringValue = null;
    setDoubleValueIsSet(false);
    this.doubleValue = 0.0;
    setIntValueIsSet(false);
    this.intValue = 0;
    setBoolValueIsSet(false);
    this.boolValue = false;
  }

  @org.apache.thrift.annotation.Nullable
  public java.lang.String getAttribute() {
    return this.attribute;
  }

  public JMXAttribute setAttribute(@org.apache.thrift.annotation.Nullable java.lang.String attribute) {
    this.attribute = attribute;
    return this;
  }

  public void unsetAttribute() {
    this.attribute = null;
  }

  /** Returns true if field attribute is set (has been assigned a value) and false otherwise */
  public boolean isSetAttribute() {
    return this.attribute != null;
  }

  public void setAttributeIsSet(boolean value) {
    if (!value) {
      this.attribute = null;
    }
  }

  /**
   * 
   * @see ValueType
   */
  @org.apache.thrift.annotation.Nullable
  public ValueType getValueType() {
    return this.valueType;
  }

  /**
   * 
   * @see ValueType
   */
  public JMXAttribute setValueType(@org.apache.thrift.annotation.Nullable ValueType valueType) {
    this.valueType = valueType;
    return this;
  }

  public void unsetValueType() {
    this.valueType = null;
  }

  /** Returns true if field valueType is set (has been assigned a value) and false otherwise */
  public boolean isSetValueType() {
    return this.valueType != null;
  }

  public void setValueTypeIsSet(boolean value) {
    if (!value) {
      this.valueType = null;
    }
  }

  @org.apache.thrift.annotation.Nullable
  public java.lang.String getStringValue() {
    return this.stringValue;
  }

  public JMXAttribute setStringValue(@org.apache.thrift.annotation.Nullable java.lang.String stringValue) {
    this.stringValue = stringValue;
    return this;
  }

  public void unsetStringValue() {
    this.stringValue = null;
  }

  /** Returns true if field stringValue is set (has been assigned a value) and false otherwise */
  public boolean isSetStringValue() {
    return this.stringValue != null;
  }

  public void setStringValueIsSet(boolean value) {
    if (!value) {
      this.stringValue = null;
    }
  }

  public double getDoubleValue() {
    return this.doubleValue;
  }

  public JMXAttribute setDoubleValue(double doubleValue) {
    this.doubleValue = doubleValue;
    setDoubleValueIsSet(true);
    return this;
  }

  public void unsetDoubleValue() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __DOUBLEVALUE_ISSET_ID);
  }

  /** Returns true if field doubleValue is set (has been assigned a value) and false otherwise */
  public boolean isSetDoubleValue() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __DOUBLEVALUE_ISSET_ID);
  }

  public void setDoubleValueIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __DOUBLEVALUE_ISSET_ID, value);
  }

  public long getIntValue() {
    return this.intValue;
  }

  public JMXAttribute setIntValue(long intValue) {
    this.intValue = intValue;
    setIntValueIsSet(true);
    return this;
  }

  public void unsetIntValue() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __INTVALUE_ISSET_ID);
  }

  /** Returns true if field intValue is set (has been assigned a value) and false otherwise */
  public boolean isSetIntValue() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __INTVALUE_ISSET_ID);
  }

  public void setIntValueIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __INTVALUE_ISSET_ID, value);
  }

  public boolean isBoolValue() {
    return this.boolValue;
  }

  public JMXAttribute setBoolValue(boolean boolValue) {
    this.boolValue = boolValue;
    setBoolValueIsSet(true);
    return this;
  }

  public void unsetBoolValue() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __BOOLVALUE_ISSET_ID);
  }

  /** Returns true if field boolValue is set (has been assigned a value) and false otherwise */
  public boolean isSetBoolValue() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __BOOLVALUE_ISSET_ID);
  }

  public void setBoolValueIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __BOOLVALUE_ISSET_ID, value);
  }

  public void setFieldValue(_Fields field, @org.apache.thrift.annotation.Nullable java.lang.Object value) {
    switch (field) {
    case ATTRIBUTE:
      if (value == null) {
        unsetAttribute();
      } else {
        setAttribute((java.lang.String)value);
      }
      break;

    case VALUE_TYPE:
      if (value == null) {
        unsetValueType();
      } else {
        setValueType((ValueType)value);
      }
      break;

    case STRING_VALUE:
      if (value == null) {
        unsetStringValue();
      } else {
        setStringValue((java.lang.String)value);
      }
      break;

    case DOUBLE_VALUE:
      if (value == null) {
        unsetDoubleValue();
      } else {
        setDoubleValue((java.lang.Double)value);
      }
      break;

    case INT_VALUE:
      if (value == null) {
        unsetIntValue();
      } else {
        setIntValue((java.lang.Long)value);
      }
      break;

    case BOOL_VALUE:
      if (value == null) {
        unsetBoolValue();
      } else {
        setBoolValue((java.lang.Boolean)value);
      }
      break;

    }
  }

  @org.apache.thrift.annotation.Nullable
  public java.lang.Object getFieldValue(_Fields field) {
    switch (field) {
    case ATTRIBUTE:
      return getAttribute();

    case VALUE_TYPE:
      return getValueType();

    case STRING_VALUE:
      return getStringValue();

    case DOUBLE_VALUE:
      return getDoubleValue();

    case INT_VALUE:
      return getIntValue();

    case BOOL_VALUE:
      return isBoolValue();

    }
    throw new java.lang.IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new java.lang.IllegalArgumentException();
    }

    switch (field) {
    case ATTRIBUTE:
      return isSetAttribute();
    case VALUE_TYPE:
      return isSetValueType();
    case STRING_VALUE:
      return isSetStringValue();
    case DOUBLE_VALUE:
      return isSetDoubleValue();
    case INT_VALUE:
      return isSetIntValue();
    case BOOL_VALUE:
      return isSetBoolValue();
    }
    throw new java.lang.IllegalStateException();
  }

  @Override
  public boolean equals(java.lang.Object that) {
    if (that instanceof JMXAttribute)
      return this.equals((JMXAttribute)that);
    return false;
  }

  public boolean equals(JMXAttribute that) {
    if (that == null)
      return false;
    if (this == that)
      return true;

    boolean this_present_attribute = true && this.isSetAttribute();
    boolean that_present_attribute = true && that.isSetAttribute();
    if (this_present_attribute || that_present_attribute) {
      if (!(this_present_attribute && that_present_attribute))
        return false;
      if (!this.attribute.equals(that.attribute))
        return false;
    }

    boolean this_present_valueType = true && this.isSetValueType();
    boolean that_present_valueType = true && that.isSetValueType();
    if (this_present_valueType || that_present_valueType) {
      if (!(this_present_valueType && that_present_valueType))
        return false;
      if (!this.valueType.equals(that.valueType))
        return false;
    }

    boolean this_present_stringValue = true && this.isSetStringValue();
    boolean that_present_stringValue = true && that.isSetStringValue();
    if (this_present_stringValue || that_present_stringValue) {
      if (!(this_present_stringValue && that_present_stringValue))
        return false;
      if (!this.stringValue.equals(that.stringValue))
        return false;
    }

    boolean this_present_doubleValue = true;
    boolean that_present_doubleValue = true;
    if (this_present_doubleValue || that_present_doubleValue) {
      if (!(this_present_doubleValue && that_present_doubleValue))
        return false;
      if (this.doubleValue != that.doubleValue)
        return false;
    }

    boolean this_present_intValue = true;
    boolean that_present_intValue = true;
    if (this_present_intValue || that_present_intValue) {
      if (!(this_present_intValue && that_present_intValue))
        return false;
      if (this.intValue != that.intValue)
        return false;
    }

    boolean this_present_boolValue = true;
    boolean that_present_boolValue = true;
    if (this_present_boolValue || that_present_boolValue) {
      if (!(this_present_boolValue && that_present_boolValue))
        return false;
      if (this.boolValue != that.boolValue)
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    int hashCode = 1;

    hashCode = hashCode * 8191 + ((isSetAttribute()) ? 131071 : 524287);
    if (isSetAttribute())
      hashCode = hashCode * 8191 + attribute.hashCode();

    hashCode = hashCode * 8191 + ((isSetValueType()) ? 131071 : 524287);
    if (isSetValueType())
      hashCode = hashCode * 8191 + valueType.getValue();

    hashCode = hashCode * 8191 + ((isSetStringValue()) ? 131071 : 524287);
    if (isSetStringValue())
      hashCode = hashCode * 8191 + stringValue.hashCode();

    hashCode = hashCode * 8191 + org.apache.thrift.TBaseHelper.hashCode(doubleValue);

    hashCode = hashCode * 8191 + org.apache.thrift.TBaseHelper.hashCode(intValue);

    hashCode = hashCode * 8191 + ((boolValue) ? 131071 : 524287);

    return hashCode;
  }

  @Override
  public int compareTo(JMXAttribute other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = java.lang.Boolean.compare(isSetAttribute(), other.isSetAttribute());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetAttribute()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.attribute, other.attribute);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetValueType(), other.isSetValueType());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetValueType()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.valueType, other.valueType);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetStringValue(), other.isSetStringValue());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetStringValue()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.stringValue, other.stringValue);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetDoubleValue(), other.isSetDoubleValue());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetDoubleValue()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.doubleValue, other.doubleValue);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetIntValue(), other.isSetIntValue());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetIntValue()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.intValue, other.intValue);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetBoolValue(), other.isSetBoolValue());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetBoolValue()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.boolValue, other.boolValue);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  @org.apache.thrift.annotation.Nullable
  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    scheme(iprot).read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    scheme(oprot).write(oprot, this);
  }

  @Override
  public java.lang.String toString() {
    java.lang.StringBuilder sb = new java.lang.StringBuilder("JMXAttribute(");
    boolean first = true;

    sb.append("attribute:");
    if (this.attribute == null) {
      sb.append("null");
    } else {
      sb.append(this.attribute);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("valueType:");
    if (this.valueType == null) {
      sb.append("null");
    } else {
      sb.append(this.valueType);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("stringValue:");
    if (this.stringValue == null) {
      sb.append("null");
    } else {
      sb.append(this.stringValue);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("doubleValue:");
    sb.append(this.doubleValue);
    first = false;
    if (!first) sb.append(", ");
    sb.append("intValue:");
    sb.append(this.intValue);
    first = false;
    if (!first) sb.append(", ");
    sb.append("boolValue:");
    sb.append(this.boolValue);
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class JMXAttributeStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
    public JMXAttributeStandardScheme getScheme() {
      return new JMXAttributeStandardScheme();
    }
  }

  private static class JMXAttributeStandardScheme extends org.apache.thrift.scheme.StandardScheme<JMXAttribute> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, JMXAttribute struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // ATTRIBUTE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.attribute = iprot.readString();
              struct.setAttributeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // VALUE_TYPE
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.valueType = org.newrelic.nrjmx.v2.nrprotocol.ValueType.findByValue(iprot.readI32());
              struct.setValueTypeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // STRING_VALUE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.stringValue = iprot.readString();
              struct.setStringValueIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // DOUBLE_VALUE
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct.doubleValue = iprot.readDouble();
              struct.setDoubleValueIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // INT_VALUE
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.intValue = iprot.readI64();
              struct.setIntValueIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 6: // BOOL_VALUE
            if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
              struct.boolValue = iprot.readBool();
              struct.setBoolValueIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, JMXAttribute struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.attribute != null) {
        oprot.writeFieldBegin(ATTRIBUTE_FIELD_DESC);
        oprot.writeString(struct.attribute);
        oprot.writeFieldEnd();
      }
      if (struct.valueType != null) {
        oprot.writeFieldBegin(VALUE_TYPE_FIELD_DESC);
        oprot.writeI32(struct.valueType.getValue());
        oprot.writeFieldEnd();
      }
      if (struct.stringValue != null) {
        oprot.writeFieldBegin(STRING_VALUE_FIELD_DESC);
        oprot.writeString(struct.stringValue);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(DOUBLE_VALUE_FIELD_DESC);
      oprot.writeDouble(struct.doubleValue);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(INT_VALUE_FIELD_DESC);
      oprot.writeI64(struct.intValue);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(BOOL_VALUE_FIELD_DESC);
      oprot.writeBool(struct.boolValue);
      oprot.writeFieldEnd();
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class JMXAttributeTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
    public JMXAttributeTupleScheme getScheme() {
      return new JMXAttributeTupleScheme();
    }
  }

  private static class JMXAttributeTupleScheme extends org.apache.thrift.scheme.TupleScheme<JMXAttribute> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, JMXAttribute struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      java.util.BitSet optionals = new java.util.BitSet();
      if (struct.isSetAttribute()) {
        optionals.set(0);
      }
      if (struct.isSetValueType()) {
        optionals.set(1);
      }
      if (struct.isSetStringValue()) {
        optionals.set(2);
      }
      if (struct.isSetDoubleValue()) {
        optionals.set(3);
      }
      if (struct.isSetIntValue()) {
        optionals.set(4);
      }
      if (struct.isSetBoolValue()) {
        optionals.set(5);
      }
      oprot.writeBitSet(optionals, 6);
      if (struct.isSetAttribute()) {
        oprot.writeString(struct.attribute);
      }
      if (struct.isSetValueType()) {
        oprot.writeI32(struct.valueType.getValue());
      }
      if (struct.isSetStringValue()) {
        oprot.writeString(struct.stringValue);
      }
      if (struct.isSetDoubleValue()) {
        oprot.writeDouble(struct.doubleValue);
      }
      if (struct.isSetIntValue()) {
        oprot.writeI64(struct.intValue);
      }
      if (struct.isSetBoolValue()) {
        oprot.writeBool(struct.boolValue);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, JMXAttribute struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      java.util.BitSet incoming = iprot.readBitSet(6);
      if (incoming.get(0)) {
        struct.attribute = iprot.readString();
        struct.setAttributeIsSet(true);
      }
      if (incoming.get(1)) {
        struct.valueType = org.newrelic.nrjmx.v2.nrprotocol.ValueType.findByValue(iprot.readI32());
        struct.setValueTypeIsSet(true);
      }
      if (incoming.get(2)) {
        struct.stringValue = iprot.readString();
        struct.setStringValueIsSet(true);
      }
      if (incoming.get(3)) {
        struct.doubleValue = iprot.readDouble();
        struct.setDoubleValueIsSet(true);
      }
      if (incoming.get(4)) {
        struct.intValue = iprot.readI64();
        struct.setIntValueIsSet(true);
      }
      if (incoming.get(5)) {
        struct.boolValue = iprot.readBool();
        struct.setBoolValueIsSet(true);
      }
    }
  }

  private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
    return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
  }
}

